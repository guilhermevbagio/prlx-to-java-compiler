/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.parser;

import prolixa.lexer.*;
import prolixa.node.*;
import prolixa.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogramaprograma1Programa */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAprogramaprograma2Programa */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAprogramaprograma3Programa */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AAprogramaprograma4Programa */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list);
            }
            break;
            case 4: /* reduce AAdeclaracoesheaddeclaracoes1Declaracoes */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce AAdeclaracoesheaddeclaracoes2Declaracoes */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list);
            }
            break;
            case 6: /* reduce AComandosHeadComandos */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list);
            }
            break;
            case 7: /* reduce ADeclaracaoMutDeclaracao */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce ADeclaracaoUnaltDeclaracao */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce ADeclaracaoUnaltInitDeclaracao */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list);
            }
            break;
            case 10: /* reduce ADeclaracaoVecDeclaracao */
            {
                ArrayList<Object> list = new10();
                push(goTo(3), list);
            }
            break;
            case 11: /* reduce AAvectormatrix1VectorMatrix */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce AAvectormatrix2VectorMatrix */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list);
            }
            break;
            case 13: /* reduce AVectorMatrixTail */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
            case 14: /* reduce ATamanhosMatrizTamanhos */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list);
            }
            break;
            case 15: /* reduce ATipoNumberTipo */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list);
            }
            break;
            case 16: /* reduce ATipoAnswerTipo */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list);
            }
            break;
            case 17: /* reduce ATipoSymbolTipo */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list);
            }
            break;
            case 18: /* reduce AVarIdVar */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list);
            }
            break;
            case 19: /* reduce AVarCallVar */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list);
            }
            break;
            case 20: /* reduce AUmListaArg */
            {
                ArrayList<Object> list = new20();
                push(goTo(9), list);
            }
            break;
            case 21: /* reduce AMaisListaArg */
            {
                ArrayList<Object> list = new21();
                push(goTo(9), list);
            }
            break;
            case 22: /* reduce AUmListaVar */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list);
            }
            break;
            case 23: /* reduce AMaisListaVar */
            {
                ArrayList<Object> list = new23();
                push(goTo(10), list);
            }
            break;
            case 24: /* reduce AUnaltIdUnalt */
            {
                ArrayList<Object> list = new24();
                push(goTo(11), list);
            }
            break;
            case 25: /* reduce AValorSymbValor */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list);
            }
            break;
            case 26: /* reduce AValorBoolValor */
            {
                ArrayList<Object> list = new26();
                push(goTo(12), list);
            }
            break;
            case 27: /* reduce AValorNumValor */
            {
                ArrayList<Object> list = new27();
                push(goTo(12), list);
            }
            break;
            case 28: /* reduce AValorStrValor */
            {
                ArrayList<Object> list = new28();
                push(goTo(12), list);
            }
            break;
            case 29: /* reduce ACmdCndComando */
            {
                ArrayList<Object> list = new29();
                push(goTo(13), list);
            }
            break;
            case 30: /* reduce ACmdSoltComando */
            {
                ArrayList<Object> list = new30();
                push(goTo(13), list);
            }
            break;
            case 31: /* reduce AAtrComandoCasado */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list);
            }
            break;
            case 32: /* reduce AInitComandoCasado */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list);
            }
            break;
            case 33: /* reduce AIfCasaComandoCasado */
            {
                ArrayList<Object> list = new33();
                push(goTo(14), list);
            }
            break;
            case 34: /* reduce ACapComandoCasado */
            {
                ArrayList<Object> list = new34();
                push(goTo(14), list);
            }
            break;
            case 35: /* reduce AShowComandoCasado */
            {
                ArrayList<Object> list = new35();
                push(goTo(14), list);
            }
            break;
            case 36: /* reduce AWhileComandoCasado */
            {
                ArrayList<Object> list = new36();
                push(goTo(14), list);
            }
            break;
            case 37: /* reduce AForComandoCasado */
            {
                ArrayList<Object> list = new37();
                push(goTo(14), list);
            }
            break;
            case 38: /* reduce ABreakComandoCasado */
            {
                ArrayList<Object> list = new38();
                push(goTo(14), list);
            }
            break;
            case 39: /* reduce AContComandoCasado */
            {
                ArrayList<Object> list = new39();
                push(goTo(14), list);
            }
            break;
            case 40: /* reduce ACmdBlkComandoCasado */
            {
                ArrayList<Object> list = new40();
                push(goTo(14), list);
            }
            break;
            case 41: /* reduce AIfSCmComandoSolteiro */
            {
                ArrayList<Object> list = new41();
                push(goTo(15), list);
            }
            break;
            case 42: /* reduce AIfSMixComandoSolteiro */
            {
                ArrayList<Object> list = new42();
                push(goTo(15), list);
            }
            break;
            case 43: /* reduce AAblocodecbloco1Bloco */
            {
                ArrayList<Object> list = new43();
                push(goTo(16), list);
            }
            break;
            case 44: /* reduce AAblocodecbloco2Bloco */
            {
                ArrayList<Object> list = new44();
                push(goTo(16), list);
            }
            break;
            case 45: /* reduce AAblococmdbloco1Bloco */
            {
                ArrayList<Object> list = new45();
                push(goTo(16), list);
            }
            break;
            case 46: /* reduce AAblococmdbloco2Bloco */
            {
                ArrayList<Object> list = new46();
                push(goTo(16), list);
            }
            break;
            case 47: /* reduce AExpFromOrExp */
            {
                ArrayList<Object> list = new47();
                push(goTo(17), list);
            }
            break;
            case 48: /* reduce AOrOneOrExp */
            {
                ArrayList<Object> list = new48();
                push(goTo(18), list);
            }
            break;
            case 49: /* reduce AOrMoreOrExp */
            {
                ArrayList<Object> list = new49();
                push(goTo(18), list);
            }
            break;
            case 50: /* reduce AXorMoreOrExp */
            {
                ArrayList<Object> list = new50();
                push(goTo(18), list);
            }
            break;
            case 51: /* reduce AAndOneAndExp */
            {
                ArrayList<Object> list = new51();
                push(goTo(19), list);
            }
            break;
            case 52: /* reduce AAndMoreAndExp */
            {
                ArrayList<Object> list = new52();
                push(goTo(19), list);
            }
            break;
            case 53: /* reduce ARelTermRelExp */
            {
                ArrayList<Object> list = new53();
                push(goTo(20), list);
            }
            break;
            case 54: /* reduce ARelGtRelExp */
            {
                ArrayList<Object> list = new54();
                push(goTo(20), list);
            }
            break;
            case 55: /* reduce ARelLtRelExp */
            {
                ArrayList<Object> list = new55();
                push(goTo(20), list);
            }
            break;
            case 56: /* reduce ARelGeRelExp */
            {
                ArrayList<Object> list = new56();
                push(goTo(20), list);
            }
            break;
            case 57: /* reduce ARelLeRelExp */
            {
                ArrayList<Object> list = new57();
                push(goTo(20), list);
            }
            break;
            case 58: /* reduce ARelEqRelExp */
            {
                ArrayList<Object> list = new58();
                push(goTo(20), list);
            }
            break;
            case 59: /* reduce ARelNeRelExp */
            {
                ArrayList<Object> list = new59();
                push(goTo(20), list);
            }
            break;
            case 60: /* reduce AAddOneAddExp */
            {
                ArrayList<Object> list = new60();
                push(goTo(21), list);
            }
            break;
            case 61: /* reduce AAddPlusAddExp */
            {
                ArrayList<Object> list = new61();
                push(goTo(21), list);
            }
            break;
            case 62: /* reduce AAddMinusAddExp */
            {
                ArrayList<Object> list = new62();
                push(goTo(21), list);
            }
            break;
            case 63: /* reduce AMulOneMulExp */
            {
                ArrayList<Object> list = new63();
                push(goTo(22), list);
            }
            break;
            case 64: /* reduce AMulTimesMulExp */
            {
                ArrayList<Object> list = new64();
                push(goTo(22), list);
            }
            break;
            case 65: /* reduce AMulDivMulExp */
            {
                ArrayList<Object> list = new65();
                push(goTo(22), list);
            }
            break;
            case 66: /* reduce AMulModMulExp */
            {
                ArrayList<Object> list = new66();
                push(goTo(22), list);
            }
            break;
            case 67: /* reduce AUnNegUnaryExp */
            {
                ArrayList<Object> list = new67();
                push(goTo(23), list);
            }
            break;
            case 68: /* reduce AUnParenUnaryExp */
            {
                ArrayList<Object> list = new68();
                push(goTo(23), list);
            }
            break;
            case 69: /* reduce AUnVarUnaryExp */
            {
                ArrayList<Object> list = new69();
                push(goTo(23), list);
            }
            break;
            case 70: /* reduce AUnValUnaryExp */
            {
                ArrayList<Object> list = new70();
                push(goTo(23), list);
            }
            break;
            case 71: /* reduce ATerminal$Declaracao */
            {
                ArrayList<Object> list = new71();
                push(goTo(24), list);
            }
            break;
            case 72: /* reduce ANonTerminal$Declaracao */
            {
                ArrayList<Object> list = new72();
                push(goTo(24), list);
            }
            break;
            case 73: /* reduce ATerminal$Comando */
            {
                ArrayList<Object> list = new73();
                push(goTo(25), list);
            }
            break;
            case 74: /* reduce ANonTerminal$Comando */
            {
                ArrayList<Object> list = new74();
                push(goTo(25), list);
            }
            break;
            case 75: /* reduce ATerminal$VectorMatrixTail */
            {
                ArrayList<Object> list = new75();
                push(goTo(26), list);
            }
            break;
            case 76: /* reduce ANonTerminal$VectorMatrixTail */
            {
                ArrayList<Object> list = new76();
                push(goTo(26), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogramaprograma1Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentificadorNode2 = (TIdentificador)nodeArrayList4.get(0);
        {
            // Block
        }
        {
            // Block
        }

        pprogramaNode1 = new APrograma(tidentificadorNode2, listNode3, listNode4);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogramaprograma2Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidentificadorNode2 = (TIdentificador)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }

        pprogramaNode1 = new APrograma(tidentificadorNode2, listNode4, listNode5);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAprogramaprograma3Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidentificadorNode2 = (TIdentificador)nodeArrayList4.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pprogramaNode1 = new APrograma(tidentificadorNode2, listNode3, listNode5);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAprogramaprograma4Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidentificadorNode2 = (TIdentificador)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pprogramaNode1 = new APrograma(tidentificadorNode2, listNode4, listNode6);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAdeclaracoesheaddeclaracoes1Declaracoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAdeclaracoesheaddeclaracoes2Declaracoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList4.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AComandosHeadComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList5.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ADeclaracaoMutDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TIdentificador tidentificadorNode3;
        ptipoNode2 = (PTipo)nodeArrayList2.get(0);
        tidentificadorNode3 = (TIdentificador)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new AMutDeclaracao(ptipoNode2, tidentificadorNode3);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ADeclaracaoUnaltDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TIdentificador tidentificadorNode3;
        ptipoNode2 = (PTipo)nodeArrayList2.get(0);
        tidentificadorNode3 = (TIdentificador)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new AUnaltDeclaracao(ptipoNode2, tidentificadorNode3);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ADeclaracaoUnaltInitDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TIdentificador tidentificadorNode3;
        PValor pvalorNode4;
        ptipoNode2 = (PTipo)nodeArrayList2.get(0);
        tidentificadorNode3 = (TIdentificador)nodeArrayList3.get(0);
        pvalorNode4 = (PValor)nodeArrayList5.get(0);

        pdeclaracaoNode1 = new AUnaltInitDeclaracao(ptipoNode2, tidentificadorNode3, pvalorNode4);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ADeclaracaoVecDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        PTamanhos ptamanhosNode3;
        TIdentificador tidentificadorNode4;
        ptipoNode2 = (PTipo)nodeArrayList3.get(0);
        ptamanhosNode3 = (PTamanhos)nodeArrayList4.get(0);
        tidentificadorNode4 = (TIdentificador)nodeArrayList5.get(0);

        pdeclaracaoNode1 = new AVecDeclaracao(ptipoNode2, ptamanhosNode3, tidentificadorNode4);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAvectormatrix1VectorMatrix */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TNumero tnumeroNode1;
        tnumeroNode1 = (TNumero)nodeArrayList1.get(0);
	if(tnumeroNode1 != null)
	{
	  listNode2.add(tnumeroNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAvectormatrix2VectorMatrix */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        TNumero tnumeroNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        tnumeroNode1 = (TNumero)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(tnumeroNode1 != null)
	{
	  listNode3.add(tnumeroNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AVectorMatrixTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        TNumero tnumeroNode1;
        tnumeroNode1 = (TNumero)nodeArrayList2.get(0);
	nodeList.add(tnumeroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ATamanhosMatrizTamanhos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTamanhos ptamanhosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        ptamanhosNode1 = new AMatrizTamanhos(listNode3);
        }
	nodeList.add(ptamanhosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ATipoNumberTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block

        ptipoNode1 = new ANumberTipo();
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ATipoAnswerTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block

        ptipoNode1 = new AAnswerTipo();
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ATipoSymbolTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block

        ptipoNode1 = new ASymbolTipo();
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AVarIdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);

        pvarNode1 = new AIdVar(tidentificadorNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AVarCallVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pvarNode1 = new ACallVar(tidentificadorNode2, listNode4);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AUmListaArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AMaisListaArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pexpNode1 = (PExp)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pexpNode1 != null)
	{
	  listNode3.add(pexpNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AUmListaVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVar pvarNode1;
        pvarNode1 = (PVar)nodeArrayList1.get(0);
	if(pvarNode1 != null)
	{
	  listNode2.add(pvarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AMaisListaVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PVar pvarNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pvarNode1 = (PVar)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pvarNode1 != null)
	{
	  listNode3.add(pvarNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AUnaltIdUnalt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        TIdentificador tidentificadorNode1;
        tidentificadorNode1 = (TIdentificador)nodeArrayList1.get(0);
	nodeList.add(tidentificadorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AValorSymbValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TSimbolo tsimboloNode2;
        tsimboloNode2 = (TSimbolo)nodeArrayList1.get(0);

        pvalorNode1 = new ASymbValor(tsimboloNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AValorBoolValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TValorBooleano tvalorbooleanoNode2;
        tvalorbooleanoNode2 = (TValorBooleano)nodeArrayList1.get(0);

        pvalorNode1 = new ABoolValor(tvalorbooleanoNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AValorNumValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNumero tnumeroNode2;
        tnumeroNode2 = (TNumero)nodeArrayList1.get(0);

        pvalorNode1 = new ANumValor(tnumeroNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AValorStrValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TLiteral tliteralNode2;
        tliteralNode2 = (TLiteral)nodeArrayList1.get(0);

        pvalorNode1 = new AStrValor(tliteralNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ACmdCndComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ACmdSoltComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAtrComandoCasado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        PExp pexpNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pcomandoNode1 = new AAtrComando(pvarNode2, pexpNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AInitComandoCasado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        PExp pexpNode3;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pcomandoNode1 = new AInitComando(tidentificadorNode2, pexpNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AIfCasaComandoCasado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        PComando pcomandoNode3;
        PComando pcomandoNode4;
        pexpNode2 = (PExp)nodeArrayList6.get(0);
        pcomandoNode3 = (PComando)nodeArrayList9.get(0);
        pcomandoNode4 = (PComando)nodeArrayList12.get(0);

        pcomandoNode1 = new AIfThenElseComando(pexpNode2, pcomandoNode3, pcomandoNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ACapComandoCasado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pcomandoNode1 = new ACapComando(listNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AShowComandoCasado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pcomandoNode1 = new AShowComando(listNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AWhileComandoCasado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        PComando pcomandoNode3;
        pexpNode2 = (PExp)nodeArrayList5.get(0);
        pcomandoNode3 = (PComando)nodeArrayList8.get(0);

        pcomandoNode1 = new AWhileComando(pexpNode2, pcomandoNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AForComandoCasado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        PExp pexpNode5;
        PComando pcomandoNode6;
        pvarNode2 = (PVar)nodeArrayList2.get(0);
        pexpNode3 = (PExp)nodeArrayList4.get(0);
        pexpNode4 = (PExp)nodeArrayList6.get(0);
        pexpNode5 = (PExp)nodeArrayList8.get(0);
        pcomandoNode6 = (PComando)nodeArrayList10.get(0);

        pcomandoNode1 = new AForComando(pvarNode2, pexpNode3, pexpNode4, pexpNode5, pcomandoNode6);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ABreakComandoCasado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block

        pcomandoNode1 = new ABreakComando();
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AContComandoCasado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block

        pcomandoNode1 = new AContComando();
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ACmdBlkComandoCasado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AIfSCmComandoSolteiro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        PComando pcomandoNode3;
        pexpNode2 = (PExp)nodeArrayList6.get(0);
        pcomandoNode3 = (PComando)nodeArrayList9.get(0);

        pcomandoNode1 = new AIfThenComando(pexpNode2, pcomandoNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AIfSMixComandoSolteiro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        PComando pcomandoNode3;
        PComando pcomandoNode4;
        pexpNode2 = (PExp)nodeArrayList6.get(0);
        pcomandoNode3 = (PComando)nodeArrayList9.get(0);
        pcomandoNode4 = (PComando)nodeArrayList12.get(0);

        pcomandoNode1 = new AIfThenElseComando(pexpNode2, pcomandoNode3, pcomandoNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAblocodecbloco1Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pcomandoNode1 = new ABlocoComando(listNode2, listNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAblocodecbloco2Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pcomandoNode1 = new ABlocoComando(listNode3, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAblococmdbloco1Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcomandoNode1 = new ABlocoComando(listNode2, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAblococmdbloco2Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pcomandoNode1 = new ABlocoComando(listNode3, listNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AExpFromOrExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AOrOneOrExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AOrMoreOrExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOrExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AXorMoreOrExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AXorExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAndOneAndExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAndMoreAndExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAndExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ARelTermRelExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ARelGtRelExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AGtExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ARelLtRelExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALtExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ARelGeRelExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AGeExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ARelLeRelExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALeExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ARelEqRelExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AEqExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ARelNeRelExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ANeExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAddOneAddExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAddPlusAddExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAddExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAddMinusAddExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ASubExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AMulOneMulExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AMulTimesMulExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMulExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AMulDivMulExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AMulModMulExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AModExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AUnNegUnaryExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANegExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AUnParenUnaryExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AUnVarUnaryExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexpNode1 = new AVarExp(pvarNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AUnValUnaryExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pexpNode1 = new AValExp(pvalorNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ATerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode1;
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList1.get(0);
	if(pdeclaracaoNode1 != null)
	{
	  listNode2.add(pdeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ANonTerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclaracao pdeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclaracaoNode2 != null)
	{
	  listNode3.add(pdeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ATerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode2.add(pcomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ANonTerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComando pcomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ATerminal$VectorMatrixTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TNumero tnumeroNode1;
        tnumeroNode1 = (TNumero)nodeArrayList1.get(0);
	if(tnumeroNode1 != null)
	{
	  listNode2.add(tnumeroNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ANonTerminal$VectorMatrixTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TNumero tnumeroNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tnumeroNode2 = (TNumero)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tnumeroNode2 != null)
	{
	  listNode3.add(tnumeroNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {7, SHIFT, 1}, },
			{{-1, ERROR, 1}, {8, SHIFT, 3}, },
			{{-1, ERROR, 2}, {69, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {9, SHIFT, 4}, },
			{{-1, ERROR, 4}, {67, SHIFT, 5}, },
			{{-1, ERROR, 5}, {0, SHIFT, 6}, },
			{{-1, REDUCE, 0}, {10, SHIFT, 7}, {12, SHIFT, 8}, },
			{{-1, ERROR, 7}, {11, SHIFT, 11}, },
			{{-1, ERROR, 8}, {13, SHIFT, 12}, },
			{{-1, REDUCE, 1}, {12, SHIFT, 8}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 11}, {1, SHIFT, 14}, },
			{{-1, ERROR, 12}, {14, SHIFT, 15}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 4}, {19, SHIFT, 16}, {20, SHIFT, 17}, {21, SHIFT, 18}, },
			{{-1, ERROR, 15}, {1, SHIFT, 21}, },
			{{-1, ERROR, 16}, {23, SHIFT, 22}, {24, SHIFT, 23}, {25, SHIFT, 24}, },
			{{-1, ERROR, 17}, {23, SHIFT, 22}, {24, SHIFT, 23}, {25, SHIFT, 24}, },
			{{-1, ERROR, 18}, {22, SHIFT, 27}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 5}, {19, SHIFT, 16}, {20, SHIFT, 17}, {21, SHIFT, 18}, },
			{{-1, ERROR, 21}, {26, SHIFT, 29}, {27, SHIFT, 30}, {28, SHIFT, 31}, {34, SHIFT, 32}, {36, SHIFT, 33}, {40, SHIFT, 34}, {41, SHIFT, 35}, {64, SHIFT, 36}, {67, SHIFT, 37}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 25}, {67, SHIFT, 45}, },
			{{-1, ERROR, 26}, {67, SHIFT, 46}, },
			{{-1, ERROR, 27}, {23, SHIFT, 22}, {24, SHIFT, 23}, {25, SHIFT, 24}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 29}, {62, SHIFT, 48}, },
			{{-1, ERROR, 30}, {62, SHIFT, 49}, },
			{{-1, ERROR, 31}, {29, SHIFT, 50}, },
			{{-1, ERROR, 32}, {35, SHIFT, 51}, },
			{{-1, ERROR, 33}, {67, SHIFT, 52}, },
			{{-1, ERROR, 34}, {3, SHIFT, 54}, },
			{{-1, ERROR, 35}, {38, SHIFT, 55}, },
			{{-1, ERROR, 36}, {19, SHIFT, 16}, {20, SHIFT, 17}, {21, SHIFT, 18}, {26, SHIFT, 29}, {27, SHIFT, 30}, {28, SHIFT, 31}, {34, SHIFT, 32}, {36, SHIFT, 33}, {40, SHIFT, 34}, {41, SHIFT, 35}, {64, SHIFT, 36}, {65, SHIFT, 56}, {67, SHIFT, 37}, },
			{{-1, REDUCE, 24}, {45, REDUCE, 18}, {62, SHIFT, 59}, },
			{{-1, ERROR, 38}, {45, SHIFT, 60}, },
			{{-1, ERROR, 39}, {44, SHIFT, 61}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 44}, {15, SHIFT, 62}, {26, SHIFT, 29}, {27, SHIFT, 30}, {28, SHIFT, 31}, {34, SHIFT, 32}, {36, SHIFT, 33}, {40, SHIFT, 34}, {41, SHIFT, 35}, {64, SHIFT, 36}, {67, SHIFT, 37}, },
			{{-1, ERROR, 45}, {3, SHIFT, 64}, },
			{{-1, ERROR, 46}, {3, SHIFT, 65}, {44, SHIFT, 66}, },
			{{-1, ERROR, 47}, {62, SHIFT, 67}, },
			{{-1, ERROR, 48}, {67, SHIFT, 52}, },
			{{-1, ERROR, 49}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 50}, {30, SHIFT, 87}, },
			{{-1, ERROR, 51}, {34, SHIFT, 88}, },
			{{-1, REDUCE, 18}, {62, SHIFT, 59}, },
			{{-1, ERROR, 53}, {37, SHIFT, 89}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 55}, {42, SHIFT, 90}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 57}, {19, SHIFT, 16}, {20, SHIFT, 17}, {21, SHIFT, 18}, {26, SHIFT, 29}, {27, SHIFT, 30}, {28, SHIFT, 31}, {34, SHIFT, 32}, {36, SHIFT, 33}, {40, SHIFT, 34}, {41, SHIFT, 35}, {64, SHIFT, 36}, {65, SHIFT, 91}, {67, SHIFT, 37}, },
			{{-1, ERROR, 58}, {26, SHIFT, 29}, {27, SHIFT, 30}, {28, SHIFT, 31}, {34, SHIFT, 32}, {36, SHIFT, 33}, {40, SHIFT, 34}, {41, SHIFT, 35}, {64, SHIFT, 36}, {65, SHIFT, 93}, {67, SHIFT, 37}, },
			{{-1, ERROR, 59}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 60}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 61}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 62}, {16, SHIFT, 97}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 66}, {4, SHIFT, 71}, {5, SHIFT, 72}, {61, SHIFT, 74}, {66, SHIFT, 76}, },
			{{-1, ERROR, 67}, {66, SHIFT, 99}, },
			{{-1, ERROR, 68}, {67, SHIFT, 101}, },
			{{-1, REDUCE, 22}, {2, SHIFT, 102}, },
			{{-1, ERROR, 70}, {63, SHIFT, 103}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 73}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 75}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 78}, {63, SHIFT, 106}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 20}, {2, SHIFT, 107}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, {58, SHIFT, 108}, {60, SHIFT, 109}, },
			{{-1, REDUCE, 51}, {57, SHIFT, 110}, },
			{{-1, REDUCE, 53}, {46, SHIFT, 111}, {47, SHIFT, 112}, {48, SHIFT, 113}, {49, SHIFT, 114}, {50, SHIFT, 115}, {51, SHIFT, 116}, },
			{{-1, REDUCE, 60}, {52, SHIFT, 117}, {53, SHIFT, 118}, },
			{{-1, REDUCE, 63}, {54, SHIFT, 119}, {55, SHIFT, 120}, {56, SHIFT, 121}, },
			{{-1, ERROR, 87}, {31, SHIFT, 122}, },
			{{-1, ERROR, 88}, {62, SHIFT, 123}, },
			{{-1, ERROR, 89}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 90}, {43, SHIFT, 125}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 92}, {26, SHIFT, 29}, {27, SHIFT, 30}, {28, SHIFT, 31}, {34, SHIFT, 32}, {36, SHIFT, 33}, {40, SHIFT, 34}, {41, SHIFT, 35}, {64, SHIFT, 36}, {65, SHIFT, 126}, {67, SHIFT, 37}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 94}, {63, SHIFT, 127}, },
			{{-1, ERROR, 95}, {3, SHIFT, 128}, },
			{{-1, ERROR, 96}, {3, SHIFT, 129}, },
			{{-1, ERROR, 97}, {17, SHIFT, 130}, },
			{{-1, ERROR, 98}, {3, SHIFT, 131}, },
			{{-1, REDUCE, 11}, {6, SHIFT, 132}, },
			{{-1, ERROR, 100}, {63, SHIFT, 135}, },
			{{-1, ERROR, 101}, {3, SHIFT, 136}, },
			{{-1, ERROR, 102}, {67, SHIFT, 52}, },
			{{-1, ERROR, 103}, {3, SHIFT, 138}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 105}, {63, SHIFT, 139}, },
			{{-1, ERROR, 106}, {3, SHIFT, 140}, },
			{{-1, ERROR, 107}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 108}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 109}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 110}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 111}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 112}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 113}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 114}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 115}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 116}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 117}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 118}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 119}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 120}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 121}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 122}, {62, SHIFT, 156}, },
			{{-1, ERROR, 123}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 124}, {38, SHIFT, 158}, },
			{{-1, ERROR, 125}, {3, SHIFT, 159}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 130}, {18, SHIFT, 160}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 132}, {66, SHIFT, 161}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 12}, {6, SHIFT, 132}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 156}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 157}, {63, SHIFT, 164}, },
			{{-1, ERROR, 158}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 160}, {0, SHIFT, 166}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 163}, {63, SHIFT, 167}, },
			{{-1, ERROR, 164}, {32, SHIFT, 168}, },
			{{-1, ERROR, 165}, {39, SHIFT, 169}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 167}, {32, SHIFT, 170}, },
			{{-1, ERROR, 168}, {26, SHIFT, 29}, {27, SHIFT, 30}, {28, SHIFT, 171}, {34, SHIFT, 32}, {36, SHIFT, 33}, {40, SHIFT, 34}, {41, SHIFT, 35}, {64, SHIFT, 36}, {67, SHIFT, 37}, },
			{{-1, ERROR, 169}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 170}, {26, SHIFT, 29}, {27, SHIFT, 30}, {28, SHIFT, 31}, {34, SHIFT, 32}, {36, SHIFT, 33}, {40, SHIFT, 34}, {41, SHIFT, 35}, {64, SHIFT, 36}, {67, SHIFT, 37}, },
			{{-1, ERROR, 171}, {29, SHIFT, 176}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 173}, {32, SHIFT, 177}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 29}, {33, SHIFT, 178}, },
			{{-1, ERROR, 176}, {30, SHIFT, 179}, },
			{{-1, ERROR, 177}, {26, SHIFT, 29}, {27, SHIFT, 30}, {28, SHIFT, 171}, {34, SHIFT, 32}, {36, SHIFT, 33}, {40, SHIFT, 34}, {41, SHIFT, 35}, {64, SHIFT, 36}, {67, SHIFT, 37}, },
			{{-1, ERROR, 178}, {32, SHIFT, 181}, },
			{{-1, ERROR, 179}, {31, SHIFT, 182}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 181}, {26, SHIFT, 29}, {27, SHIFT, 30}, {28, SHIFT, 31}, {34, SHIFT, 32}, {36, SHIFT, 33}, {40, SHIFT, 34}, {41, SHIFT, 35}, {64, SHIFT, 36}, {67, SHIFT, 37}, },
			{{-1, ERROR, 182}, {62, SHIFT, 185}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 185}, {4, SHIFT, 71}, {5, SHIFT, 72}, {53, SHIFT, 73}, {61, SHIFT, 74}, {62, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 52}, },
			{{-1, ERROR, 186}, {63, SHIFT, 187}, },
			{{-1, ERROR, 187}, {32, SHIFT, 188}, },
			{{-1, ERROR, 188}, {26, SHIFT, 29}, {27, SHIFT, 30}, {28, SHIFT, 171}, {34, SHIFT, 32}, {36, SHIFT, 33}, {40, SHIFT, 34}, {41, SHIFT, 35}, {64, SHIFT, 36}, {67, SHIFT, 37}, },
			{{-1, ERROR, 189}, {33, SHIFT, 190}, },
			{{-1, ERROR, 190}, {32, SHIFT, 191}, },
			{{-1, ERROR, 191}, {26, SHIFT, 29}, {27, SHIFT, 30}, {28, SHIFT, 171}, {34, SHIFT, 32}, {36, SHIFT, 33}, {40, SHIFT, 34}, {41, SHIFT, 35}, {64, SHIFT, 36}, {67, SHIFT, 37}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 9}, },
			{{-1, 10}, {9, 13}, },
			{{-1, 19}, {20, 28}, {57, 28}, },
			{{-1, 100}, },
			{{-1, 133}, {134, 162}, },
			{{-1, 68}, },
			{{-1, 25}, {17, 26}, {27, 47}, },
			{{-1, 77}, {21, 38}, {33, 53}, {36, 38}, {44, 38}, {48, 69}, {57, 38}, {58, 38}, {92, 38}, {102, 69}, {168, 38}, {170, 38}, {177, 38}, {181, 38}, {188, 38}, {191, 38}, },
			{{-1, 78}, {59, 94}, {107, 141}, },
			{{-1, 70}, {102, 137}, },
			{{-1, 39}, },
			{{-1, 79}, {66, 98}, },
			{{-1, 40}, {44, 63}, {58, 63}, {92, 63}, {170, 174}, },
			{{-1, 41}, {168, 172}, {170, 175}, {177, 180}, {181, 183}, {188, 189}, {191, 183}, },
			{{-1, 42}, {181, 184}, },
			{{-1, 43}, },
			{{-1, 80}, {60, 95}, {61, 96}, {75, 105}, {89, 124}, {123, 157}, {156, 163}, {158, 165}, {169, 173}, {185, 186}, },
			{{-1, 81}, {108, 142}, {109, 143}, },
			{{-1, 82}, {110, 144}, },
			{{-1, 83}, {111, 145}, {112, 146}, {113, 147}, {114, 148}, {115, 149}, {116, 150}, },
			{{-1, 84}, {117, 151}, {118, 152}, },
			{{-1, 85}, {119, 153}, {120, 154}, {121, 155}, },
			{{-1, 86}, {73, 104}, },
			{{-1, 20}, {36, 57}, },
			{{-1, 44}, {36, 58}, {57, 92}, },
			{{-1, 134}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'This'",
			"expecting: 'is'",
			"expecting: EOF",
			"expecting: 'program'",
			"expecting: identificador",
			"expecting: '.'",
			"expecting: 'It', 'Let', EOF",
			"expecting: 'presents'",
			"expecting: 'us'",
			"expecting: 'Let', EOF",
			"expecting: ':'",
			"expecting: 'begin'",
			"expecting: 'Let', 'alterable', 'unalterable', 'vector', EOF",
			"expecting: 'number', 'answer', 'symbol'",
			"expecting: 'of'",
			"expecting: 'Let', 'alterable', 'unalterable', 'vector', 'capture', 'show', 'just', 'as', 'considering', 'abandon', 'go', '[', ']', identificador, EOF",
			"expecting: 'capture', 'show', 'just', 'as', 'considering', 'abandon', 'go', '[', identificador",
			"expecting: '(', identificador",
			"expecting: '('",
			"expecting: 'in'",
			"expecting: 'long'",
			"expecting: ';'",
			"expecting: 'to'",
			"expecting: 'alterable', 'unalterable', 'vector', 'capture', 'show', 'just', 'as', 'considering', 'abandon', 'go', '[', ']', identificador",
			"expecting: '=', ':=', '('",
			"expecting: ':='",
			"expecting: '='",
			"expecting: 'That', 'capture', 'show', 'just', 'as', 'considering', 'abandon', 'go', '[', ']', identificador",
			"expecting: 'That', 'capture', 'show', 'just', 'otherwise', 'as', 'considering', 'abandon', 'go', '[', ']', identificador",
			"expecting: 'That', 'capture', 'show', 'just', 'as', 'considering', 'abandon', 'go', '[', identificador",
			"expecting: ';', '='",
			"expecting: simbolo, valor booleano, '-', literal, '(', numero, identificador",
			"expecting: 'case'",
			"expecting: 'as'",
			"expecting: ',', ';', 'do', 'from', 'to', 'by', '==', '!=', '>=', '<=', '>', '<', '+', '-', '*', '/', '//', 'and', 'or', 'xor', '(', ')'",
			"expecting: 'from'",
			"expecting: 'next'",
			"expecting: 'capture', 'show', 'just', 'as', 'considering', 'abandon', 'go', '[', ']', identificador",
			"expecting: 'would'",
			"expecting: simbolo, valor booleano, literal, numero",
			"expecting: numero",
			"expecting: ',', ')'",
			"expecting: ')'",
			"expecting: ',', ';', 'do', 'to', 'by', '==', '!=', '>=', '<=', '>', '<', '+', '-', '*', '/', '//', 'and', 'or', 'xor', ')'",
			"expecting: ',', ';', 'do', 'to', 'by', ')'",
			"expecting: ',', ';', 'do', 'to', 'by', 'or', 'xor', ')'",
			"expecting: ',', ';', 'do', 'to', 'by', 'and', 'or', 'xor', ')'",
			"expecting: ',', ';', 'do', 'to', 'by', '==', '!=', '>=', '<=', '>', '<', 'and', 'or', 'xor', ')'",
			"expecting: ',', ';', 'do', 'to', 'by', '==', '!=', '>=', '<=', '>', '<', '+', '-', 'and', 'or', 'xor', ')'",
			"expecting: 'that'",
			"expecting: 'iteration'",
			"expecting: 'be'",
			"expecting: 'x', ')'",
			"expecting: ',', ';', 'do', 'from', 'to', 'by', ':=', '==', '!=', '>=', '<=', '>', '<', '+', '-', '*', '/', '//', 'and', 'or', 'xor', ')'",
			"expecting: 'all'",
			"expecting: 'do'",
			"expecting: 'by'",
			"expecting: 'otherwise'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 10, 11, 2, 12, 10, 13, 13, 14, 15, 12, 16, 17, 17, 17, 4, 4, 13, 15, 18, 18, 19, 20, 4, 21, 22, 23, 24, 25, 26, 27, 27, 27, 28, 29, 21, 30, 18, 4, 31, 32, 33, 34, 35, 28, 36, 28, 23, 37, 31, 31, 31, 38, 27, 15, 15, 39, 40, 4, 41, 42, 43, 43, 31, 43, 31, 43, 43, 42, 43, 41, 44, 45, 46, 47, 48, 43, 49, 18, 31, 50, 28, 37, 28, 42, 21, 21, 51, 21, 52, 42, 21, 4, 21, 43, 42, 21, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 18, 31, 22, 21, 28, 53, 28, 28, 54, 15, 40, 52, 52, 4, 15, 42, 28, 43, 28, 42, 44, 44, 45, 46, 46, 46, 46, 46, 46, 47, 47, 48, 48, 48, 31, 42, 31, 28, 5, 52, 52, 42, 55, 56, 2, 55, 16, 31, 16, 19, 28, 55, 27, 28, 32, 16, 55, 49, 28, 16, 18, 28, 27, 31, 42, 55, 16, 57, 55, 16, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
