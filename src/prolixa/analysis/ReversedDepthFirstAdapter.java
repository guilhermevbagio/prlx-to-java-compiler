/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.analysis;

import java.util.*;
import prolixa.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDeclaracao());
            Collections.reverse(copy);
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAPrograma(node);
    }

    public void inAMutDeclaracao(AMutDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAMutDeclaracao(AMutDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMutDeclaracao(AMutDeclaracao node)
    {
        inAMutDeclaracao(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAMutDeclaracao(node);
    }

    public void inAUnaltDeclaracao(AUnaltDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAUnaltDeclaracao(AUnaltDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaltDeclaracao(AUnaltDeclaracao node)
    {
        inAUnaltDeclaracao(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAUnaltDeclaracao(node);
    }

    public void inAUnaltInitDeclaracao(AUnaltInitDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAUnaltInitDeclaracao(AUnaltInitDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaltInitDeclaracao(AUnaltInitDeclaracao node)
    {
        inAUnaltInitDeclaracao(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAUnaltInitDeclaracao(node);
    }

    public void inAVecDeclaracao(AVecDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAVecDeclaracao(AVecDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVecDeclaracao(AVecDeclaracao node)
    {
        inAVecDeclaracao(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getTamanhos() != null)
        {
            node.getTamanhos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAVecDeclaracao(node);
    }

    public void inAMatrizTamanhos(AMatrizTamanhos node)
    {
        defaultIn(node);
    }

    public void outAMatrizTamanhos(AMatrizTamanhos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatrizTamanhos(AMatrizTamanhos node)
    {
        inAMatrizTamanhos(node);
        {
            List<TNumero> copy = new ArrayList<TNumero>(node.getNumero());
            Collections.reverse(copy);
            for(TNumero e : copy)
            {
                e.apply(this);
            }
        }
        outAMatrizTamanhos(node);
    }

    public void inANumberTipo(ANumberTipo node)
    {
        defaultIn(node);
    }

    public void outANumberTipo(ANumberTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberTipo(ANumberTipo node)
    {
        inANumberTipo(node);
        outANumberTipo(node);
    }

    public void inAAnswerTipo(AAnswerTipo node)
    {
        defaultIn(node);
    }

    public void outAAnswerTipo(AAnswerTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnswerTipo(AAnswerTipo node)
    {
        inAAnswerTipo(node);
        outAAnswerTipo(node);
    }

    public void inASymbolTipo(ASymbolTipo node)
    {
        defaultIn(node);
    }

    public void outASymbolTipo(ASymbolTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASymbolTipo(ASymbolTipo node)
    {
        inASymbolTipo(node);
        outASymbolTipo(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdVar(node);
    }

    public void inACallVar(ACallVar node)
    {
        defaultIn(node);
    }

    public void outACallVar(ACallVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallVar(ACallVar node)
    {
        inACallVar(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getExp());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outACallVar(node);
    }

    public void inASymbValor(ASymbValor node)
    {
        defaultIn(node);
    }

    public void outASymbValor(ASymbValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASymbValor(ASymbValor node)
    {
        inASymbValor(node);
        if(node.getSimbolo() != null)
        {
            node.getSimbolo().apply(this);
        }
        outASymbValor(node);
    }

    public void inABoolValor(ABoolValor node)
    {
        defaultIn(node);
    }

    public void outABoolValor(ABoolValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolValor(ABoolValor node)
    {
        inABoolValor(node);
        if(node.getValorBooleano() != null)
        {
            node.getValorBooleano().apply(this);
        }
        outABoolValor(node);
    }

    public void inANumValor(ANumValor node)
    {
        defaultIn(node);
    }

    public void outANumValor(ANumValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumValor(ANumValor node)
    {
        inANumValor(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumValor(node);
    }

    public void inAStrValor(AStrValor node)
    {
        defaultIn(node);
    }

    public void outAStrValor(AStrValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrValor(AStrValor node)
    {
        inAStrValor(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outAStrValor(node);
    }

    public void inAAtrComando(AAtrComando node)
    {
        defaultIn(node);
    }

    public void outAAtrComando(AAtrComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtrComando(AAtrComando node)
    {
        inAAtrComando(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAtrComando(node);
    }

    public void inAInitComando(AInitComando node)
    {
        defaultIn(node);
    }

    public void outAInitComando(AInitComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitComando(AInitComando node)
    {
        inAInitComando(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAInitComando(node);
    }

    public void inAIfThenElseComando(AIfThenElseComando node)
    {
        defaultIn(node);
    }

    public void outAIfThenElseComando(AIfThenElseComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenElseComando(AIfThenElseComando node)
    {
        inAIfThenElseComando(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAIfThenElseComando(node);
    }

    public void inAIfThenComando(AIfThenComando node)
    {
        defaultIn(node);
    }

    public void outAIfThenComando(AIfThenComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenComando(AIfThenComando node)
    {
        inAIfThenComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAIfThenComando(node);
    }

    public void inACapComando(ACapComando node)
    {
        defaultIn(node);
    }

    public void outACapComando(ACapComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACapComando(ACapComando node)
    {
        inACapComando(node);
        {
            List<PVar> copy = new ArrayList<PVar>(node.getVar());
            Collections.reverse(copy);
            for(PVar e : copy)
            {
                e.apply(this);
            }
        }
        outACapComando(node);
    }

    public void inAShowComando(AShowComando node)
    {
        defaultIn(node);
    }

    public void outAShowComando(AShowComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShowComando(AShowComando node)
    {
        inAShowComando(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getExp());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        outAShowComando(node);
    }

    public void inAWhileComando(AWhileComando node)
    {
        defaultIn(node);
    }

    public void outAWhileComando(AWhileComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileComando(AWhileComando node)
    {
        inAWhileComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAWhileComando(node);
    }

    public void inAForComando(AForComando node)
    {
        defaultIn(node);
    }

    public void outAForComando(AForComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForComando(AForComando node)
    {
        inAForComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getC() != null)
        {
            node.getC().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAForComando(node);
    }

    public void inABreakComando(ABreakComando node)
    {
        defaultIn(node);
    }

    public void outABreakComando(ABreakComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakComando(ABreakComando node)
    {
        inABreakComando(node);
        outABreakComando(node);
    }

    public void inAContComando(AContComando node)
    {
        defaultIn(node);
    }

    public void outAContComando(AContComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContComando(AContComando node)
    {
        inAContComando(node);
        outAContComando(node);
    }

    public void inABlocoComando(ABlocoComando node)
    {
        defaultIn(node);
    }

    public void outABlocoComando(ABlocoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComando(ABlocoComando node)
    {
        inABlocoComando(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDeclaracao());
            Collections.reverse(copy);
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        outABlocoComando(node);
    }

    public void inAOrExp(AOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrExp(AOrExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        inAOrExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAOrExp(node);
    }

    public void inAXorExp(AXorExp node)
    {
        defaultIn(node);
    }

    public void outAXorExp(AXorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorExp(AXorExp node)
    {
        inAXorExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAXorExp(node);
    }

    public void inAAndExp(AAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndExp(AAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        inAAndExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAndExp(node);
    }

    public void inAGtExp(AGtExp node)
    {
        defaultIn(node);
    }

    public void outAGtExp(AGtExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtExp(AGtExp node)
    {
        inAGtExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAGtExp(node);
    }

    public void inALtExp(ALtExp node)
    {
        defaultIn(node);
    }

    public void outALtExp(ALtExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtExp(ALtExp node)
    {
        inALtExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outALtExp(node);
    }

    public void inAGeExp(AGeExp node)
    {
        defaultIn(node);
    }

    public void outAGeExp(AGeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeExp(AGeExp node)
    {
        inAGeExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAGeExp(node);
    }

    public void inALeExp(ALeExp node)
    {
        defaultIn(node);
    }

    public void outALeExp(ALeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeExp(ALeExp node)
    {
        inALeExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outALeExp(node);
    }

    public void inAEqExp(AEqExp node)
    {
        defaultIn(node);
    }

    public void outAEqExp(AEqExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqExp(AEqExp node)
    {
        inAEqExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAEqExp(node);
    }

    public void inANeExp(ANeExp node)
    {
        defaultIn(node);
    }

    public void outANeExp(ANeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeExp(ANeExp node)
    {
        inANeExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outANeExp(node);
    }

    public void inAAddExp(AAddExp node)
    {
        defaultIn(node);
    }

    public void outAAddExp(AAddExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExp(AAddExp node)
    {
        inAAddExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAddExp(node);
    }

    public void inASubExp(ASubExp node)
    {
        defaultIn(node);
    }

    public void outASubExp(ASubExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExp(ASubExp node)
    {
        inASubExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outASubExp(node);
    }

    public void inAMulExp(AMulExp node)
    {
        defaultIn(node);
    }

    public void outAMulExp(AMulExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulExp(AMulExp node)
    {
        inAMulExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAMulExp(node);
    }

    public void inADivExp(ADivExp node)
    {
        defaultIn(node);
    }

    public void outADivExp(ADivExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp(ADivExp node)
    {
        inADivExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outADivExp(node);
    }

    public void inAModExp(AModExp node)
    {
        defaultIn(node);
    }

    public void outAModExp(AModExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExp(AModExp node)
    {
        inAModExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAModExp(node);
    }

    public void inANegExp(ANegExp node)
    {
        defaultIn(node);
    }

    public void outANegExp(ANegExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegExp(ANegExp node)
    {
        inANegExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outANegExp(node);
    }

    public void inAVarExp(AVarExp node)
    {
        defaultIn(node);
    }

    public void outAVarExp(AVarExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExp(AVarExp node)
    {
        inAVarExp(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarExp(node);
    }

    public void inAValExp(AValExp node)
    {
        defaultIn(node);
    }

    public void outAValExp(AValExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValExp(AValExp node)
    {
        inAValExp(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValExp(node);
    }
}
