/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.analysis;

import java.util.*;
import prolixa.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAProgramaPrograma(AProgramaPrograma node)
    {
        defaultIn(node);
    }

    public void outAProgramaPrograma(AProgramaPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramaPrograma(AProgramaPrograma node)
    {
        inAProgramaPrograma(node);
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getDeclaracoes() != null)
        {
            node.getDeclaracoes().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getProgram() != null)
        {
            node.getProgram().apply(this);
        }
        if(node.getIs() != null)
        {
            node.getIs().apply(this);
        }
        if(node.getThis() != null)
        {
            node.getThis().apply(this);
        }
        outAProgramaPrograma(node);
    }

    public void inADeclaracoesHeadDeclaracoes(ADeclaracoesHeadDeclaracoes node)
    {
        defaultIn(node);
    }

    public void outADeclaracoesHeadDeclaracoes(ADeclaracoesHeadDeclaracoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracoesHeadDeclaracoes(ADeclaracoesHeadDeclaracoes node)
    {
        inADeclaracoesHeadDeclaracoes(node);
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDeclaracao());
            Collections.reverse(copy);
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getPresents() != null)
        {
            node.getPresents().apply(this);
        }
        if(node.getIt() != null)
        {
            node.getIt().apply(this);
        }
        outADeclaracoesHeadDeclaracoes(node);
    }

    public void inAComandosHeadComandos(AComandosHeadComandos node)
    {
        defaultIn(node);
    }

    public void outAComandosHeadComandos(AComandosHeadComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandosHeadComandos(AComandosHeadComandos node)
    {
        inAComandosHeadComandos(node);
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getAll() != null)
        {
            node.getAll().apply(this);
        }
        if(node.getBe() != null)
        {
            node.getBe().apply(this);
        }
        if(node.getWould() != null)
        {
            node.getWould().apply(this);
        }
        if(node.getThat() != null)
        {
            node.getThat().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        if(node.getUs() != null)
        {
            node.getUs().apply(this);
        }
        if(node.getLet() != null)
        {
            node.getLet().apply(this);
        }
        outAComandosHeadComandos(node);
    }

    public void inADeclaracaoMutDeclaracao(ADeclaracaoMutDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoMutDeclaracao(ADeclaracaoMutDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoMutDeclaracao(ADeclaracaoMutDeclaracao node)
    {
        inADeclaracaoMutDeclaracao(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getAlterable() != null)
        {
            node.getAlterable().apply(this);
        }
        outADeclaracaoMutDeclaracao(node);
    }

    public void inADeclaracaoUnaltDeclaracao(ADeclaracaoUnaltDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoUnaltDeclaracao(ADeclaracaoUnaltDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoUnaltDeclaracao(ADeclaracaoUnaltDeclaracao node)
    {
        inADeclaracaoUnaltDeclaracao(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getUnalterable() != null)
        {
            node.getUnalterable().apply(this);
        }
        outADeclaracaoUnaltDeclaracao(node);
    }

    public void inADeclaracaoUnaltInitDeclaracao(ADeclaracaoUnaltInitDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoUnaltInitDeclaracao(ADeclaracaoUnaltInitDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoUnaltInitDeclaracao(ADeclaracaoUnaltInitDeclaracao node)
    {
        inADeclaracaoUnaltInitDeclaracao(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getInicializacao() != null)
        {
            node.getInicializacao().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getUnalterable() != null)
        {
            node.getUnalterable().apply(this);
        }
        outADeclaracaoUnaltInitDeclaracao(node);
    }

    public void inADeclaracaoVecDeclaracao(ADeclaracaoVecDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoVecDeclaracao(ADeclaracaoVecDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoVecDeclaracao(ADeclaracaoVecDeclaracao node)
    {
        inADeclaracaoVecDeclaracao(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getTamanhos() != null)
        {
            node.getTamanhos().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getOf() != null)
        {
            node.getOf().apply(this);
        }
        if(node.getVector() != null)
        {
            node.getVector().apply(this);
        }
        outADeclaracaoVecDeclaracao(node);
    }

    public void inATamanhosUnitTamanhos(ATamanhosUnitTamanhos node)
    {
        defaultIn(node);
    }

    public void outATamanhosUnitTamanhos(ATamanhosUnitTamanhos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATamanhosUnitTamanhos(ATamanhosUnitTamanhos node)
    {
        inATamanhosUnitTamanhos(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outATamanhosUnitTamanhos(node);
    }

    public void inATamanhosMatrizTamanhos(ATamanhosMatrizTamanhos node)
    {
        defaultIn(node);
    }

    public void outATamanhosMatrizTamanhos(ATamanhosMatrizTamanhos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATamanhosMatrizTamanhos(ATamanhosMatrizTamanhos node)
    {
        inATamanhosMatrizTamanhos(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        if(node.getVezes() != null)
        {
            node.getVezes().apply(this);
        }
        if(node.getTamanhos() != null)
        {
            node.getTamanhos().apply(this);
        }
        outATamanhosMatrizTamanhos(node);
    }

    public void inATipoNumberTipo(ATipoNumberTipo node)
    {
        defaultIn(node);
    }

    public void outATipoNumberTipo(ATipoNumberTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoNumberTipo(ATipoNumberTipo node)
    {
        inATipoNumberTipo(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outATipoNumberTipo(node);
    }

    public void inATipoAnswerTipo(ATipoAnswerTipo node)
    {
        defaultIn(node);
    }

    public void outATipoAnswerTipo(ATipoAnswerTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoAnswerTipo(ATipoAnswerTipo node)
    {
        inATipoAnswerTipo(node);
        if(node.getAnswer() != null)
        {
            node.getAnswer().apply(this);
        }
        outATipoAnswerTipo(node);
    }

    public void inATipoSymbolTipo(ATipoSymbolTipo node)
    {
        defaultIn(node);
    }

    public void outATipoSymbolTipo(ATipoSymbolTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoSymbolTipo(ATipoSymbolTipo node)
    {
        inATipoSymbolTipo(node);
        if(node.getSymbol() != null)
        {
            node.getSymbol().apply(this);
        }
        outATipoSymbolTipo(node);
    }

    public void inAVarIdVar(AVarIdVar node)
    {
        defaultIn(node);
    }

    public void outAVarIdVar(AVarIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarIdVar(AVarIdVar node)
    {
        inAVarIdVar(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAVarIdVar(node);
    }

    public void inAVarCallVar(AVarCallVar node)
    {
        defaultIn(node);
    }

    public void outAVarCallVar(AVarCallVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarCallVar(AVarCallVar node)
    {
        inAVarCallVar(node);
        if(node.getListaArgRparen() != null)
        {
            node.getListaArgRparen().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAVarCallVar(node);
    }

    public void inALargHeadListaArgRparen(ALargHeadListaArgRparen node)
    {
        defaultIn(node);
    }

    public void outALargHeadListaArgRparen(ALargHeadListaArgRparen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALargHeadListaArgRparen(ALargHeadListaArgRparen node)
    {
        inALargHeadListaArgRparen(node);
        if(node.getOrExpRparen() != null)
        {
            node.getOrExpRparen().apply(this);
        }
        outALargHeadListaArgRparen(node);
    }

    public void inAListaArgPrimeiroListaArg(AListaArgPrimeiroListaArg node)
    {
        defaultIn(node);
    }

    public void outAListaArgPrimeiroListaArg(AListaArgPrimeiroListaArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaArgPrimeiroListaArg(AListaArgPrimeiroListaArg node)
    {
        inAListaArgPrimeiroListaArg(node);
        if(node.getListaArgTail() != null)
        {
            node.getListaArgTail().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAListaArgPrimeiroListaArg(node);
    }

    public void inAListaArgContListaArgTail(AListaArgContListaArgTail node)
    {
        defaultIn(node);
    }

    public void outAListaArgContListaArgTail(AListaArgContListaArgTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaArgContListaArgTail(AListaArgContListaArgTail node)
    {
        inAListaArgContListaArgTail(node);
        if(node.getListaArgTail() != null)
        {
            node.getListaArgTail().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outAListaArgContListaArgTail(node);
    }

    public void inAListaArgFimListaArgTail(AListaArgFimListaArgTail node)
    {
        defaultIn(node);
    }

    public void outAListaArgFimListaArgTail(AListaArgFimListaArgTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaArgFimListaArgTail(AListaArgFimListaArgTail node)
    {
        inAListaArgFimListaArgTail(node);
        outAListaArgFimListaArgTail(node);
    }

    public void inAUnaltIdUnalt(AUnaltIdUnalt node)
    {
        defaultIn(node);
    }

    public void outAUnaltIdUnalt(AUnaltIdUnalt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaltIdUnalt(AUnaltIdUnalt node)
    {
        inAUnaltIdUnalt(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAUnaltIdUnalt(node);
    }

    public void inAValorSymbValor(AValorSymbValor node)
    {
        defaultIn(node);
    }

    public void outAValorSymbValor(AValorSymbValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorSymbValor(AValorSymbValor node)
    {
        inAValorSymbValor(node);
        if(node.getSimbolo() != null)
        {
            node.getSimbolo().apply(this);
        }
        outAValorSymbValor(node);
    }

    public void inAValorBoolValor(AValorBoolValor node)
    {
        defaultIn(node);
    }

    public void outAValorBoolValor(AValorBoolValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorBoolValor(AValorBoolValor node)
    {
        inAValorBoolValor(node);
        if(node.getValorBooleano() != null)
        {
            node.getValorBooleano().apply(this);
        }
        outAValorBoolValor(node);
    }

    public void inAValorNumValor(AValorNumValor node)
    {
        defaultIn(node);
    }

    public void outAValorNumValor(AValorNumValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorNumValor(AValorNumValor node)
    {
        inAValorNumValor(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outAValorNumValor(node);
    }

    public void inAValorStrValor(AValorStrValor node)
    {
        defaultIn(node);
    }

    public void outAValorStrValor(AValorStrValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorStrValor(AValorStrValor node)
    {
        inAValorStrValor(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outAValorStrValor(node);
    }

    public void inACmdCndComando(ACmdCndComando node)
    {
        defaultIn(node);
    }

    public void outACmdCndComando(ACmdCndComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACmdCndComando(ACmdCndComando node)
    {
        inACmdCndComando(node);
        if(node.getComandoCasado() != null)
        {
            node.getComandoCasado().apply(this);
        }
        outACmdCndComando(node);
    }

    public void inACmdSoltComando(ACmdSoltComando node)
    {
        defaultIn(node);
    }

    public void outACmdSoltComando(ACmdSoltComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACmdSoltComando(ACmdSoltComando node)
    {
        inACmdSoltComando(node);
        if(node.getComandoSolteiro() != null)
        {
            node.getComandoSolteiro().apply(this);
        }
        outACmdSoltComando(node);
    }

    public void inAAtrComandoCasado(AAtrComandoCasado node)
    {
        defaultIn(node);
    }

    public void outAAtrComandoCasado(AAtrComandoCasado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtrComandoCasado(AAtrComandoCasado node)
    {
        inAAtrComandoCasado(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAtrComandoCasado(node);
    }

    public void inAInitComandoCasado(AInitComandoCasado node)
    {
        defaultIn(node);
    }

    public void outAInitComandoCasado(AInitComandoCasado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitComandoCasado(AInitComandoCasado node)
    {
        inAInitComandoCasado(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getInicializacao() != null)
        {
            node.getInicializacao().apply(this);
        }
        if(node.getUnalt() != null)
        {
            node.getUnalt().apply(this);
        }
        outAInitComandoCasado(node);
    }

    public void inAIfCasaComandoCasado(AIfCasaComandoCasado node)
    {
        defaultIn(node);
    }

    public void outAIfCasaComandoCasado(AIfCasaComandoCasado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfCasaComandoCasado(AIfCasaComandoCasado node)
    {
        inAIfCasaComandoCasado(node);
        if(node.getDibi() != null)
        {
            node.getDibi().apply(this);
        }
        if(node.getC() != null)
        {
            node.getC().apply(this);
        }
        if(node.getOtherwise() != null)
        {
            node.getOtherwise().apply(this);
        }
        if(node.getBidi() != null)
        {
            node.getBidi().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getThatKw() != null)
        {
            node.getThatKw().apply(this);
        }
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getJust() != null)
        {
            node.getJust().apply(this);
        }
        outAIfCasaComandoCasado(node);
    }

    public void inACapComandoCasado(ACapComandoCasado node)
    {
        defaultIn(node);
    }

    public void outACapComandoCasado(ACapComandoCasado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACapComandoCasado(ACapComandoCasado node)
    {
        inACapComandoCasado(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getListaVar() != null)
        {
            node.getListaVar().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getCapture() != null)
        {
            node.getCapture().apply(this);
        }
        outACapComandoCasado(node);
    }

    public void inAShowComandoCasado(AShowComandoCasado node)
    {
        defaultIn(node);
    }

    public void outAShowComandoCasado(AShowComandoCasado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShowComandoCasado(AShowComandoCasado node)
    {
        inAShowComandoCasado(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getListaExpRparen() != null)
        {
            node.getListaExpRparen().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getShow() != null)
        {
            node.getShow().apply(this);
        }
        outAShowComandoCasado(node);
    }

    public void inAWhileComandoCasado(AWhileComandoCasado node)
    {
        defaultIn(node);
    }

    public void outAWhileComandoCasado(AWhileComandoCasado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileComandoCasado(AWhileComandoCasado node)
    {
        inAWhileComandoCasado(node);
        if(node.getWhileStmt() != null)
        {
            node.getWhileStmt().apply(this);
        }
        outAWhileComandoCasado(node);
    }

    public void inAForComandoCasado(AForComandoCasado node)
    {
        defaultIn(node);
    }

    public void outAForComandoCasado(AForComandoCasado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForComandoCasado(AForComandoCasado node)
    {
        inAForComandoCasado(node);
        if(node.getForStmt() != null)
        {
            node.getForStmt().apply(this);
        }
        outAForComandoCasado(node);
    }

    public void inABreakComandoCasado(ABreakComandoCasado node)
    {
        defaultIn(node);
    }

    public void outABreakComandoCasado(ABreakComandoCasado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakComandoCasado(ABreakComandoCasado node)
    {
        inABreakComandoCasado(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getAbandon() != null)
        {
            node.getAbandon().apply(this);
        }
        outABreakComandoCasado(node);
    }

    public void inAContComandoCasado(AContComandoCasado node)
    {
        defaultIn(node);
    }

    public void outAContComandoCasado(AContComandoCasado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContComandoCasado(AContComandoCasado node)
    {
        inAContComandoCasado(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getIteration() != null)
        {
            node.getIteration().apply(this);
        }
        if(node.getNext() != null)
        {
            node.getNext().apply(this);
        }
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getGo() != null)
        {
            node.getGo().apply(this);
        }
        outAContComandoCasado(node);
    }

    public void inACmdBlkComandoCasado(ACmdBlkComandoCasado node)
    {
        defaultIn(node);
    }

    public void outACmdBlkComandoCasado(ACmdBlkComandoCasado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACmdBlkComandoCasado(ACmdBlkComandoCasado node)
    {
        inACmdBlkComandoCasado(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outACmdBlkComandoCasado(node);
    }

    public void inAIfSCmComandoSolteiro(AIfSCmComandoSolteiro node)
    {
        defaultIn(node);
    }

    public void outAIfSCmComandoSolteiro(AIfSCmComandoSolteiro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfSCmComandoSolteiro(AIfSCmComandoSolteiro node)
    {
        inAIfSCmComandoSolteiro(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getThatKw() != null)
        {
            node.getThatKw().apply(this);
        }
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getJust() != null)
        {
            node.getJust().apply(this);
        }
        outAIfSCmComandoSolteiro(node);
    }

    public void inAIfSMixComandoSolteiro(AIfSMixComandoSolteiro node)
    {
        defaultIn(node);
    }

    public void outAIfSMixComandoSolteiro(AIfSMixComandoSolteiro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfSMixComandoSolteiro(AIfSMixComandoSolteiro node)
    {
        inAIfSMixComandoSolteiro(node);
        if(node.getComandoSolteiro() != null)
        {
            node.getComandoSolteiro().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getOtherwise() != null)
        {
            node.getOtherwise().apply(this);
        }
        if(node.getComandoCasado() != null)
        {
            node.getComandoCasado().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getThatKw() != null)
        {
            node.getThatKw().apply(this);
        }
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getJust() != null)
        {
            node.getJust().apply(this);
        }
        outAIfSMixComandoSolteiro(node);
    }

    public void inAWhileStmtKwWhileStmt(AWhileStmtKwWhileStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileStmtKwWhileStmt(AWhileStmtKwWhileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmtKwWhileStmt(AWhileStmtKwWhileStmt node)
    {
        inAWhileStmtKwWhileStmt(node);
        if(node.getComandoCasado() != null)
        {
            node.getComandoCasado().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getLong() != null)
        {
            node.getLong().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAWhileStmtKwWhileStmt(node);
    }

    public void inAForStmtKwForStmt(AForStmtKwForStmt node)
    {
        defaultIn(node);
    }

    public void outAForStmtKwForStmt(AForStmtKwForStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStmtKwForStmt(AForStmtKwForStmt node)
    {
        inAForStmtKwForStmt(node);
        if(node.getComandoCasado() != null)
        {
            node.getComandoCasado().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getBy() != null)
        {
            node.getBy().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getConsidering() != null)
        {
            node.getConsidering().apply(this);
        }
        outAForStmtKwForStmt(node);
    }

    public void inAListaVarPrimeiraListaVar(AListaVarPrimeiraListaVar node)
    {
        defaultIn(node);
    }

    public void outAListaVarPrimeiraListaVar(AListaVarPrimeiraListaVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaVarPrimeiraListaVar(AListaVarPrimeiraListaVar node)
    {
        inAListaVarPrimeiraListaVar(node);
        if(node.getListaVarTail() != null)
        {
            node.getListaVarTail().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAListaVarPrimeiraListaVar(node);
    }

    public void inAListaVarContListaVarTail(AListaVarContListaVarTail node)
    {
        defaultIn(node);
    }

    public void outAListaVarContListaVarTail(AListaVarContListaVarTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaVarContListaVarTail(AListaVarContListaVarTail node)
    {
        inAListaVarContListaVarTail(node);
        if(node.getListaVarTail() != null)
        {
            node.getListaVarTail().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outAListaVarContListaVarTail(node);
    }

    public void inAListaVarFimListaVarTail(AListaVarFimListaVarTail node)
    {
        defaultIn(node);
    }

    public void outAListaVarFimListaVarTail(AListaVarFimListaVarTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaVarFimListaVarTail(AListaVarFimListaVarTail node)
    {
        inAListaVarFimListaVarTail(node);
        outAListaVarFimListaVarTail(node);
    }

    public void inALexpHeadListaExpRparen(ALexpHeadListaExpRparen node)
    {
        defaultIn(node);
    }

    public void outALexpHeadListaExpRparen(ALexpHeadListaExpRparen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALexpHeadListaExpRparen(ALexpHeadListaExpRparen node)
    {
        inALexpHeadListaExpRparen(node);
        if(node.getOrExpRparen() != null)
        {
            node.getOrExpRparen().apply(this);
        }
        outALexpHeadListaExpRparen(node);
    }

    public void inABlocoDecBloco(ABlocoDecBloco node)
    {
        defaultIn(node);
    }

    public void outABlocoDecBloco(ABlocoDecBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoDecBloco(ABlocoDecBloco node)
    {
        inABlocoDecBloco(node);
        if(node.getColcheteDir() != null)
        {
            node.getColcheteDir().apply(this);
        }
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDeclaracao());
            Collections.reverse(copy);
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getColcheteEsq() != null)
        {
            node.getColcheteEsq().apply(this);
        }
        outABlocoDecBloco(node);
    }

    public void inABlocoCmdBloco(ABlocoCmdBloco node)
    {
        defaultIn(node);
    }

    public void outABlocoCmdBloco(ABlocoCmdBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoCmdBloco(ABlocoCmdBloco node)
    {
        inABlocoCmdBloco(node);
        if(node.getColcheteDir() != null)
        {
            node.getColcheteDir().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDeclaracao());
            Collections.reverse(copy);
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getColcheteEsq() != null)
        {
            node.getColcheteEsq().apply(this);
        }
        outABlocoCmdBloco(node);
    }

    public void inAExp(AExp node)
    {
        defaultIn(node);
    }

    public void outAExp(AExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp(AExp node)
    {
        inAExp(node);
        if(node.getOrExp() != null)
        {
            node.getOrExp().apply(this);
        }
        outAExp(node);
    }

    public void inAOrNormOrExp(AOrNormOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrNormOrExp(AOrNormOrExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrNormOrExp(AOrNormOrExp node)
    {
        inAOrNormOrExp(node);
        if(node.getOrTail() != null)
        {
            node.getOrTail().apply(this);
        }
        if(node.getAndExp() != null)
        {
            node.getAndExp().apply(this);
        }
        outAOrNormOrExp(node);
    }

    public void inAOrRparOrExpRparen(AOrRparOrExpRparen node)
    {
        defaultIn(node);
    }

    public void outAOrRparOrExpRparen(AOrRparOrExpRparen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrRparOrExpRparen(AOrRparOrExpRparen node)
    {
        inAOrRparOrExpRparen(node);
        if(node.getOrTailRparen() != null)
        {
            node.getOrTailRparen().apply(this);
        }
        if(node.getAndExpRparen() != null)
        {
            node.getAndExpRparen().apply(this);
        }
        outAOrRparOrExpRparen(node);
    }

    public void inAOrMoreOrTail(AOrMoreOrTail node)
    {
        defaultIn(node);
    }

    public void outAOrMoreOrTail(AOrMoreOrTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrMoreOrTail(AOrMoreOrTail node)
    {
        inAOrMoreOrTail(node);
        if(node.getOrTail() != null)
        {
            node.getOrTail().apply(this);
        }
        if(node.getAndExp() != null)
        {
            node.getAndExp().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAOrMoreOrTail(node);
    }

    public void inAXorMoreOrTail(AXorMoreOrTail node)
    {
        defaultIn(node);
    }

    public void outAXorMoreOrTail(AXorMoreOrTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorMoreOrTail(AXorMoreOrTail node)
    {
        inAXorMoreOrTail(node);
        if(node.getOrTail() != null)
        {
            node.getOrTail().apply(this);
        }
        if(node.getAndExp() != null)
        {
            node.getAndExp().apply(this);
        }
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        outAXorMoreOrTail(node);
    }

    public void inAOrEndOrTail(AOrEndOrTail node)
    {
        defaultIn(node);
    }

    public void outAOrEndOrTail(AOrEndOrTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrEndOrTail(AOrEndOrTail node)
    {
        inAOrEndOrTail(node);
        outAOrEndOrTail(node);
    }

    public void inAOrRMoreOrTailRparen(AOrRMoreOrTailRparen node)
    {
        defaultIn(node);
    }

    public void outAOrRMoreOrTailRparen(AOrRMoreOrTailRparen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrRMoreOrTailRparen(AOrRMoreOrTailRparen node)
    {
        inAOrRMoreOrTailRparen(node);
        if(node.getOrTailRparen() != null)
        {
            node.getOrTailRparen().apply(this);
        }
        if(node.getAndExpRparen() != null)
        {
            node.getAndExpRparen().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAOrRMoreOrTailRparen(node);
    }

    public void inAXorRMoreOrTailRparen(AXorRMoreOrTailRparen node)
    {
        defaultIn(node);
    }

    public void outAXorRMoreOrTailRparen(AXorRMoreOrTailRparen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorRMoreOrTailRparen(AXorRMoreOrTailRparen node)
    {
        inAXorRMoreOrTailRparen(node);
        if(node.getOrTailRparen() != null)
        {
            node.getOrTailRparen().apply(this);
        }
        if(node.getAndExpRparen() != null)
        {
            node.getAndExpRparen().apply(this);
        }
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        outAXorRMoreOrTailRparen(node);
    }

    public void inAOrRParOrTailRparen(AOrRParOrTailRparen node)
    {
        defaultIn(node);
    }

    public void outAOrRParOrTailRparen(AOrRParOrTailRparen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrRParOrTailRparen(AOrRParOrTailRparen node)
    {
        inAOrRParOrTailRparen(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        outAOrRParOrTailRparen(node);
    }

    public void inAOrRComOrTailRparen(AOrRComOrTailRparen node)
    {
        defaultIn(node);
    }

    public void outAOrRComOrTailRparen(AOrRComOrTailRparen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrRComOrTailRparen(AOrRComOrTailRparen node)
    {
        inAOrRComOrTailRparen(node);
        if(node.getListaExpRparen() != null)
        {
            node.getListaExpRparen().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outAOrRComOrTailRparen(node);
    }

    public void inAAndTermAndExp(AAndTermAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndTermAndExp(AAndTermAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndTermAndExp(AAndTermAndExp node)
    {
        inAAndTermAndExp(node);
        if(node.getRelExp() != null)
        {
            node.getRelExp().apply(this);
        }
        outAAndTermAndExp(node);
    }

    public void inAAndMoreAndExp(AAndMoreAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndMoreAndExp(AAndMoreAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndMoreAndExp(AAndMoreAndExp node)
    {
        inAAndMoreAndExp(node);
        if(node.getAndExp() != null)
        {
            node.getAndExp().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getRelExp() != null)
        {
            node.getRelExp().apply(this);
        }
        outAAndMoreAndExp(node);
    }

    public void inAAndExpRTermAndExpRparen(AAndExpRTermAndExpRparen node)
    {
        defaultIn(node);
    }

    public void outAAndExpRTermAndExpRparen(AAndExpRTermAndExpRparen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpRTermAndExpRparen(AAndExpRTermAndExpRparen node)
    {
        inAAndExpRTermAndExpRparen(node);
        if(node.getRelExp() != null)
        {
            node.getRelExp().apply(this);
        }
        outAAndExpRTermAndExpRparen(node);
    }

    public void inAAndExpRMoreAndExpRparen(AAndExpRMoreAndExpRparen node)
    {
        defaultIn(node);
    }

    public void outAAndExpRMoreAndExpRparen(AAndExpRMoreAndExpRparen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpRMoreAndExpRparen(AAndExpRMoreAndExpRparen node)
    {
        inAAndExpRMoreAndExpRparen(node);
        if(node.getAndExpRparen() != null)
        {
            node.getAndExpRparen().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getRelExp() != null)
        {
            node.getRelExp().apply(this);
        }
        outAAndExpRMoreAndExpRparen(node);
    }

    public void inAAndRMoreAndTailRparen(AAndRMoreAndTailRparen node)
    {
        defaultIn(node);
    }

    public void outAAndRMoreAndTailRparen(AAndRMoreAndTailRparen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndRMoreAndTailRparen(AAndRMoreAndTailRparen node)
    {
        inAAndRMoreAndTailRparen(node);
        if(node.getAndTailRparen() != null)
        {
            node.getAndTailRparen().apply(this);
        }
        if(node.getRelExp() != null)
        {
            node.getRelExp().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAndRMoreAndTailRparen(node);
    }

    public void inAAndRParAndTailRparen(AAndRParAndTailRparen node)
    {
        defaultIn(node);
    }

    public void outAAndRParAndTailRparen(AAndRParAndTailRparen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndRParAndTailRparen(AAndRParAndTailRparen node)
    {
        inAAndRParAndTailRparen(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        outAAndRParAndTailRparen(node);
    }

    public void inAAndRComAndTailRparen(AAndRComAndTailRparen node)
    {
        defaultIn(node);
    }

    public void outAAndRComAndTailRparen(AAndRComAndTailRparen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndRComAndTailRparen(AAndRComAndTailRparen node)
    {
        inAAndRComAndTailRparen(node);
        if(node.getListaExpRparen() != null)
        {
            node.getListaExpRparen().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outAAndRComAndTailRparen(node);
    }

    public void inARelHeadRelExp(ARelHeadRelExp node)
    {
        defaultIn(node);
    }

    public void outARelHeadRelExp(ARelHeadRelExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelHeadRelExp(ARelHeadRelExp node)
    {
        inARelHeadRelExp(node);
        if(node.getRelTail() != null)
        {
            node.getRelTail().apply(this);
        }
        if(node.getAddExp() != null)
        {
            node.getAddExp().apply(this);
        }
        outARelHeadRelExp(node);
    }

    public void inARelGtRelTail(ARelGtRelTail node)
    {
        defaultIn(node);
    }

    public void outARelGtRelTail(ARelGtRelTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelGtRelTail(ARelGtRelTail node)
    {
        inARelGtRelTail(node);
        if(node.getAddExp() != null)
        {
            node.getAddExp().apply(this);
        }
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        outARelGtRelTail(node);
    }

    public void inARelLtRelTail(ARelLtRelTail node)
    {
        defaultIn(node);
    }

    public void outARelLtRelTail(ARelLtRelTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelLtRelTail(ARelLtRelTail node)
    {
        inARelLtRelTail(node);
        if(node.getAddExp() != null)
        {
            node.getAddExp().apply(this);
        }
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        outARelLtRelTail(node);
    }

    public void inARelGeRelTail(ARelGeRelTail node)
    {
        defaultIn(node);
    }

    public void outARelGeRelTail(ARelGeRelTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelGeRelTail(ARelGeRelTail node)
    {
        inARelGeRelTail(node);
        if(node.getAddExp() != null)
        {
            node.getAddExp().apply(this);
        }
        if(node.getMaiorigual() != null)
        {
            node.getMaiorigual().apply(this);
        }
        outARelGeRelTail(node);
    }

    public void inARelLeRelTail(ARelLeRelTail node)
    {
        defaultIn(node);
    }

    public void outARelLeRelTail(ARelLeRelTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelLeRelTail(ARelLeRelTail node)
    {
        inARelLeRelTail(node);
        if(node.getAddExp() != null)
        {
            node.getAddExp().apply(this);
        }
        if(node.getMenorigual() != null)
        {
            node.getMenorigual().apply(this);
        }
        outARelLeRelTail(node);
    }

    public void inARelEqRelTail(ARelEqRelTail node)
    {
        defaultIn(node);
    }

    public void outARelEqRelTail(ARelEqRelTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelEqRelTail(ARelEqRelTail node)
    {
        inARelEqRelTail(node);
        if(node.getAddExp() != null)
        {
            node.getAddExp().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        outARelEqRelTail(node);
    }

    public void inARelNeRelTail(ARelNeRelTail node)
    {
        defaultIn(node);
    }

    public void outARelNeRelTail(ARelNeRelTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelNeRelTail(ARelNeRelTail node)
    {
        inARelNeRelTail(node);
        if(node.getAddExp() != null)
        {
            node.getAddExp().apply(this);
        }
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        outARelNeRelTail(node);
    }

    public void inARelEndRelTail(ARelEndRelTail node)
    {
        defaultIn(node);
    }

    public void outARelEndRelTail(ARelEndRelTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelEndRelTail(ARelEndRelTail node)
    {
        inARelEndRelTail(node);
        outARelEndRelTail(node);
    }

    public void inAAddTermAddExp(AAddTermAddExp node)
    {
        defaultIn(node);
    }

    public void outAAddTermAddExp(AAddTermAddExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddTermAddExp(AAddTermAddExp node)
    {
        inAAddTermAddExp(node);
        if(node.getMulExp() != null)
        {
            node.getMulExp().apply(this);
        }
        outAAddTermAddExp(node);
    }

    public void inAAddPlusAddExp(AAddPlusAddExp node)
    {
        defaultIn(node);
    }

    public void outAAddPlusAddExp(AAddPlusAddExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddPlusAddExp(AAddPlusAddExp node)
    {
        inAAddPlusAddExp(node);
        if(node.getAddExp() != null)
        {
            node.getAddExp().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getMulExp() != null)
        {
            node.getMulExp().apply(this);
        }
        outAAddPlusAddExp(node);
    }

    public void inAAddMinusAddExp(AAddMinusAddExp node)
    {
        defaultIn(node);
    }

    public void outAAddMinusAddExp(AAddMinusAddExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddMinusAddExp(AAddMinusAddExp node)
    {
        inAAddMinusAddExp(node);
        if(node.getAddExp() != null)
        {
            node.getAddExp().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getMulExp() != null)
        {
            node.getMulExp().apply(this);
        }
        outAAddMinusAddExp(node);
    }

    public void inAMulExpTermMulExp(AMulExpTermMulExp node)
    {
        defaultIn(node);
    }

    public void outAMulExpTermMulExp(AMulExpTermMulExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulExpTermMulExp(AMulExpTermMulExp node)
    {
        inAMulExpTermMulExp(node);
        if(node.getUnaryExp() != null)
        {
            node.getUnaryExp().apply(this);
        }
        outAMulExpTermMulExp(node);
    }

    public void inAMulExpTimesMulExp(AMulExpTimesMulExp node)
    {
        defaultIn(node);
    }

    public void outAMulExpTimesMulExp(AMulExpTimesMulExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulExpTimesMulExp(AMulExpTimesMulExp node)
    {
        inAMulExpTimesMulExp(node);
        if(node.getMulExp() != null)
        {
            node.getMulExp().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getUnaryExp() != null)
        {
            node.getUnaryExp().apply(this);
        }
        outAMulExpTimesMulExp(node);
    }

    public void inAMulExpDivMulExp(AMulExpDivMulExp node)
    {
        defaultIn(node);
    }

    public void outAMulExpDivMulExp(AMulExpDivMulExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulExpDivMulExp(AMulExpDivMulExp node)
    {
        inAMulExpDivMulExp(node);
        if(node.getMulExp() != null)
        {
            node.getMulExp().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getUnaryExp() != null)
        {
            node.getUnaryExp().apply(this);
        }
        outAMulExpDivMulExp(node);
    }

    public void inAMulExpModMulExp(AMulExpModMulExp node)
    {
        defaultIn(node);
    }

    public void outAMulExpModMulExp(AMulExpModMulExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulExpModMulExp(AMulExpModMulExp node)
    {
        inAMulExpModMulExp(node);
        if(node.getMulExp() != null)
        {
            node.getMulExp().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getUnaryExp() != null)
        {
            node.getUnaryExp().apply(this);
        }
        outAMulExpModMulExp(node);
    }

    public void inAMulTimesMulTail(AMulTimesMulTail node)
    {
        defaultIn(node);
    }

    public void outAMulTimesMulTail(AMulTimesMulTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulTimesMulTail(AMulTimesMulTail node)
    {
        inAMulTimesMulTail(node);
        if(node.getMulTail() != null)
        {
            node.getMulTail().apply(this);
        }
        if(node.getUnaryExp() != null)
        {
            node.getUnaryExp().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMulTimesMulTail(node);
    }

    public void inAMulDivMulTail(AMulDivMulTail node)
    {
        defaultIn(node);
    }

    public void outAMulDivMulTail(AMulDivMulTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulDivMulTail(AMulDivMulTail node)
    {
        inAMulDivMulTail(node);
        if(node.getMulTail() != null)
        {
            node.getMulTail().apply(this);
        }
        if(node.getUnaryExp() != null)
        {
            node.getUnaryExp().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outAMulDivMulTail(node);
    }

    public void inAMulModMulTail(AMulModMulTail node)
    {
        defaultIn(node);
    }

    public void outAMulModMulTail(AMulModMulTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulModMulTail(AMulModMulTail node)
    {
        inAMulModMulTail(node);
        if(node.getMulTail() != null)
        {
            node.getMulTail().apply(this);
        }
        if(node.getUnaryExp() != null)
        {
            node.getUnaryExp().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        outAMulModMulTail(node);
    }

    public void inAMulEndMulTail(AMulEndMulTail node)
    {
        defaultIn(node);
    }

    public void outAMulEndMulTail(AMulEndMulTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulEndMulTail(AMulEndMulTail node)
    {
        inAMulEndMulTail(node);
        outAMulEndMulTail(node);
    }

    public void inAUnNegUnaryExp(AUnNegUnaryExp node)
    {
        defaultIn(node);
    }

    public void outAUnNegUnaryExp(AUnNegUnaryExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnNegUnaryExp(AUnNegUnaryExp node)
    {
        inAUnNegUnaryExp(node);
        if(node.getUnaryExp() != null)
        {
            node.getUnaryExp().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAUnNegUnaryExp(node);
    }

    public void inAUnParenUnaryExp(AUnParenUnaryExp node)
    {
        defaultIn(node);
    }

    public void outAUnParenUnaryExp(AUnParenUnaryExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnParenUnaryExp(AUnParenUnaryExp node)
    {
        inAUnParenUnaryExp(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        outAUnParenUnaryExp(node);
    }

    public void inAUnVarUnaryExp(AUnVarUnaryExp node)
    {
        defaultIn(node);
    }

    public void outAUnVarUnaryExp(AUnVarUnaryExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnVarUnaryExp(AUnVarUnaryExp node)
    {
        inAUnVarUnaryExp(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAUnVarUnaryExp(node);
    }

    public void inAUnValUnaryExp(AUnValUnaryExp node)
    {
        defaultIn(node);
    }

    public void outAUnValUnaryExp(AUnValUnaryExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnValUnaryExp(AUnValUnaryExp node)
    {
        inAUnValUnaryExp(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAUnValUnaryExp(node);
    }
}
