/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AForToKwForTo extends PForTo
{
    private TTo _to_;
    private PExp _exp_;
    private PForBy _forBy_;

    public AForToKwForTo()
    {
        // Constructor
    }

    public AForToKwForTo(
        @SuppressWarnings("hiding") TTo _to_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") PForBy _forBy_)
    {
        // Constructor
        setTo(_to_);

        setExp(_exp_);

        setForBy(_forBy_);

    }

    @Override
    public Object clone()
    {
        return new AForToKwForTo(
            cloneNode(this._to_),
            cloneNode(this._exp_),
            cloneNode(this._forBy_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForToKwForTo(this);
    }

    public TTo getTo()
    {
        return this._to_;
    }

    public void setTo(TTo node)
    {
        if(this._to_ != null)
        {
            this._to_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._to_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public PForBy getForBy()
    {
        return this._forBy_;
    }

    public void setForBy(PForBy node)
    {
        if(this._forBy_ != null)
        {
            this._forBy_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._forBy_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._to_)
            + toString(this._exp_)
            + toString(this._forBy_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._to_ == child)
        {
            this._to_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._forBy_ == child)
        {
            this._forBy_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._to_ == oldChild)
        {
            setTo((TTo) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._forBy_ == oldChild)
        {
            setForBy((PForBy) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
