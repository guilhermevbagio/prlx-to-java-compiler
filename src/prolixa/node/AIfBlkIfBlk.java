/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AIfBlkIfBlk extends PIfBlk
{
    private PIfHead _ifHead_;
    private PBloco _thenBlk_;
    private PIfTailBlk _ifTailBlk_;

    public AIfBlkIfBlk()
    {
        // Constructor
    }

    public AIfBlkIfBlk(
        @SuppressWarnings("hiding") PIfHead _ifHead_,
        @SuppressWarnings("hiding") PBloco _thenBlk_,
        @SuppressWarnings("hiding") PIfTailBlk _ifTailBlk_)
    {
        // Constructor
        setIfHead(_ifHead_);

        setThenBlk(_thenBlk_);

        setIfTailBlk(_ifTailBlk_);

    }

    @Override
    public Object clone()
    {
        return new AIfBlkIfBlk(
            cloneNode(this._ifHead_),
            cloneNode(this._thenBlk_),
            cloneNode(this._ifTailBlk_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfBlkIfBlk(this);
    }

    public PIfHead getIfHead()
    {
        return this._ifHead_;
    }

    public void setIfHead(PIfHead node)
    {
        if(this._ifHead_ != null)
        {
            this._ifHead_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifHead_ = node;
    }

    public PBloco getThenBlk()
    {
        return this._thenBlk_;
    }

    public void setThenBlk(PBloco node)
    {
        if(this._thenBlk_ != null)
        {
            this._thenBlk_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._thenBlk_ = node;
    }

    public PIfTailBlk getIfTailBlk()
    {
        return this._ifTailBlk_;
    }

    public void setIfTailBlk(PIfTailBlk node)
    {
        if(this._ifTailBlk_ != null)
        {
            this._ifTailBlk_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifTailBlk_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ifHead_)
            + toString(this._thenBlk_)
            + toString(this._ifTailBlk_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ifHead_ == child)
        {
            this._ifHead_ = null;
            return;
        }

        if(this._thenBlk_ == child)
        {
            this._thenBlk_ = null;
            return;
        }

        if(this._ifTailBlk_ == child)
        {
            this._ifTailBlk_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ifHead_ == oldChild)
        {
            setIfHead((PIfHead) newChild);
            return;
        }

        if(this._thenBlk_ == oldChild)
        {
            setThenBlk((PBloco) newChild);
            return;
        }

        if(this._ifTailBlk_ == oldChild)
        {
            setIfTailBlk((PIfTailBlk) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
