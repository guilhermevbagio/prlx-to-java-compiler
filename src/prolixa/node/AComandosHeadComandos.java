/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import java.util.*;
import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AComandosHeadComandos extends PComandos
{
    private TLet _let_;
    private TUs _us_;
    private TBegin _begin_;
    private TDoisPontos _doisPontos_;
    private final LinkedList<PComando> _comando_ = new LinkedList<PComando>();
    private TThat _that_;
    private TWould _would_;
    private TBe _be_;
    private TAll _all_;
    private TPonto _ponto_;

    public AComandosHeadComandos()
    {
        // Constructor
    }

    public AComandosHeadComandos(
        @SuppressWarnings("hiding") TLet _let_,
        @SuppressWarnings("hiding") TUs _us_,
        @SuppressWarnings("hiding") TBegin _begin_,
        @SuppressWarnings("hiding") TDoisPontos _doisPontos_,
        @SuppressWarnings("hiding") List<?> _comando_,
        @SuppressWarnings("hiding") TThat _that_,
        @SuppressWarnings("hiding") TWould _would_,
        @SuppressWarnings("hiding") TBe _be_,
        @SuppressWarnings("hiding") TAll _all_,
        @SuppressWarnings("hiding") TPonto _ponto_)
    {
        // Constructor
        setLet(_let_);

        setUs(_us_);

        setBegin(_begin_);

        setDoisPontos(_doisPontos_);

        setComando(_comando_);

        setThat(_that_);

        setWould(_would_);

        setBe(_be_);

        setAll(_all_);

        setPonto(_ponto_);

    }

    @Override
    public Object clone()
    {
        return new AComandosHeadComandos(
            cloneNode(this._let_),
            cloneNode(this._us_),
            cloneNode(this._begin_),
            cloneNode(this._doisPontos_),
            cloneList(this._comando_),
            cloneNode(this._that_),
            cloneNode(this._would_),
            cloneNode(this._be_),
            cloneNode(this._all_),
            cloneNode(this._ponto_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAComandosHeadComandos(this);
    }

    public TLet getLet()
    {
        return this._let_;
    }

    public void setLet(TLet node)
    {
        if(this._let_ != null)
        {
            this._let_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._let_ = node;
    }

    public TUs getUs()
    {
        return this._us_;
    }

    public void setUs(TUs node)
    {
        if(this._us_ != null)
        {
            this._us_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._us_ = node;
    }

    public TBegin getBegin()
    {
        return this._begin_;
    }

    public void setBegin(TBegin node)
    {
        if(this._begin_ != null)
        {
            this._begin_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._begin_ = node;
    }

    public TDoisPontos getDoisPontos()
    {
        return this._doisPontos_;
    }

    public void setDoisPontos(TDoisPontos node)
    {
        if(this._doisPontos_ != null)
        {
            this._doisPontos_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._doisPontos_ = node;
    }

    public LinkedList<PComando> getComando()
    {
        return this._comando_;
    }

    public void setComando(List<?> list)
    {
        for(PComando e : this._comando_)
        {
            e.parent(null);
        }
        this._comando_.clear();

        for(Object obj_e : list)
        {
            PComando e = (PComando) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._comando_.add(e);
        }
    }

    public TThat getThat()
    {
        return this._that_;
    }

    public void setThat(TThat node)
    {
        if(this._that_ != null)
        {
            this._that_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._that_ = node;
    }

    public TWould getWould()
    {
        return this._would_;
    }

    public void setWould(TWould node)
    {
        if(this._would_ != null)
        {
            this._would_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._would_ = node;
    }

    public TBe getBe()
    {
        return this._be_;
    }

    public void setBe(TBe node)
    {
        if(this._be_ != null)
        {
            this._be_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._be_ = node;
    }

    public TAll getAll()
    {
        return this._all_;
    }

    public void setAll(TAll node)
    {
        if(this._all_ != null)
        {
            this._all_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._all_ = node;
    }

    public TPonto getPonto()
    {
        return this._ponto_;
    }

    public void setPonto(TPonto node)
    {
        if(this._ponto_ != null)
        {
            this._ponto_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ponto_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._let_)
            + toString(this._us_)
            + toString(this._begin_)
            + toString(this._doisPontos_)
            + toString(this._comando_)
            + toString(this._that_)
            + toString(this._would_)
            + toString(this._be_)
            + toString(this._all_)
            + toString(this._ponto_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._let_ == child)
        {
            this._let_ = null;
            return;
        }

        if(this._us_ == child)
        {
            this._us_ = null;
            return;
        }

        if(this._begin_ == child)
        {
            this._begin_ = null;
            return;
        }

        if(this._doisPontos_ == child)
        {
            this._doisPontos_ = null;
            return;
        }

        if(this._comando_.remove(child))
        {
            return;
        }

        if(this._that_ == child)
        {
            this._that_ = null;
            return;
        }

        if(this._would_ == child)
        {
            this._would_ = null;
            return;
        }

        if(this._be_ == child)
        {
            this._be_ = null;
            return;
        }

        if(this._all_ == child)
        {
            this._all_ = null;
            return;
        }

        if(this._ponto_ == child)
        {
            this._ponto_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._let_ == oldChild)
        {
            setLet((TLet) newChild);
            return;
        }

        if(this._us_ == oldChild)
        {
            setUs((TUs) newChild);
            return;
        }

        if(this._begin_ == oldChild)
        {
            setBegin((TBegin) newChild);
            return;
        }

        if(this._doisPontos_ == oldChild)
        {
            setDoisPontos((TDoisPontos) newChild);
            return;
        }

        for(ListIterator<PComando> i = this._comando_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComando) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._that_ == oldChild)
        {
            setThat((TThat) newChild);
            return;
        }

        if(this._would_ == oldChild)
        {
            setWould((TWould) newChild);
            return;
        }

        if(this._be_ == oldChild)
        {
            setBe((TBe) newChild);
            return;
        }

        if(this._all_ == oldChild)
        {
            setAll((TAll) newChild);
            return;
        }

        if(this._ponto_ == oldChild)
        {
            setPonto((TPonto) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
