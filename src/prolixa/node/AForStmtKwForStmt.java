/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AForStmtKwForStmt extends PForStmt
{
    private TConsidering _considering_;
    private PVar _var_;
    private PForFrom _forFrom_;

    public AForStmtKwForStmt()
    {
        // Constructor
    }

    public AForStmtKwForStmt(
        @SuppressWarnings("hiding") TConsidering _considering_,
        @SuppressWarnings("hiding") PVar _var_,
        @SuppressWarnings("hiding") PForFrom _forFrom_)
    {
        // Constructor
        setConsidering(_considering_);

        setVar(_var_);

        setForFrom(_forFrom_);

    }

    @Override
    public Object clone()
    {
        return new AForStmtKwForStmt(
            cloneNode(this._considering_),
            cloneNode(this._var_),
            cloneNode(this._forFrom_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForStmtKwForStmt(this);
    }

    public TConsidering getConsidering()
    {
        return this._considering_;
    }

    public void setConsidering(TConsidering node)
    {
        if(this._considering_ != null)
        {
            this._considering_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._considering_ = node;
    }

    public PVar getVar()
    {
        return this._var_;
    }

    public void setVar(PVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public PForFrom getForFrom()
    {
        return this._forFrom_;
    }

    public void setForFrom(PForFrom node)
    {
        if(this._forFrom_ != null)
        {
            this._forFrom_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._forFrom_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._considering_)
            + toString(this._var_)
            + toString(this._forFrom_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._considering_ == child)
        {
            this._considering_ = null;
            return;
        }

        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._forFrom_ == child)
        {
            this._forFrom_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._considering_ == oldChild)
        {
            setConsidering((TConsidering) newChild);
            return;
        }

        if(this._var_ == oldChild)
        {
            setVar((PVar) newChild);
            return;
        }

        if(this._forFrom_ == oldChild)
        {
            setForFrom((PForFrom) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
