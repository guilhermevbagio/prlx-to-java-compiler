/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AForStmtKwForStmt extends PForStmt
{
    private TConsidering _considering_;
    private PVar _var_;
    private TFrom _from_;
    private TTo _to_;
    private PExp _a_;
    private TBy _by_;
    private PExp _b_;
    private TDo _do_;
    private PComandoCasado _comandoCasado_;

    public AForStmtKwForStmt()
    {
        // Constructor
    }

    public AForStmtKwForStmt(
        @SuppressWarnings("hiding") TConsidering _considering_,
        @SuppressWarnings("hiding") PVar _var_,
        @SuppressWarnings("hiding") TFrom _from_,
        @SuppressWarnings("hiding") TTo _to_,
        @SuppressWarnings("hiding") PExp _a_,
        @SuppressWarnings("hiding") TBy _by_,
        @SuppressWarnings("hiding") PExp _b_,
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") PComandoCasado _comandoCasado_)
    {
        // Constructor
        setConsidering(_considering_);

        setVar(_var_);

        setFrom(_from_);

        setTo(_to_);

        setA(_a_);

        setBy(_by_);

        setB(_b_);

        setDo(_do_);

        setComandoCasado(_comandoCasado_);

    }

    @Override
    public Object clone()
    {
        return new AForStmtKwForStmt(
            cloneNode(this._considering_),
            cloneNode(this._var_),
            cloneNode(this._from_),
            cloneNode(this._to_),
            cloneNode(this._a_),
            cloneNode(this._by_),
            cloneNode(this._b_),
            cloneNode(this._do_),
            cloneNode(this._comandoCasado_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForStmtKwForStmt(this);
    }

    public TConsidering getConsidering()
    {
        return this._considering_;
    }

    public void setConsidering(TConsidering node)
    {
        if(this._considering_ != null)
        {
            this._considering_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._considering_ = node;
    }

    public PVar getVar()
    {
        return this._var_;
    }

    public void setVar(PVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public TFrom getFrom()
    {
        return this._from_;
    }

    public void setFrom(TFrom node)
    {
        if(this._from_ != null)
        {
            this._from_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._from_ = node;
    }

    public TTo getTo()
    {
        return this._to_;
    }

    public void setTo(TTo node)
    {
        if(this._to_ != null)
        {
            this._to_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._to_ = node;
    }

    public PExp getA()
    {
        return this._a_;
    }

    public void setA(PExp node)
    {
        if(this._a_ != null)
        {
            this._a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._a_ = node;
    }

    public TBy getBy()
    {
        return this._by_;
    }

    public void setBy(TBy node)
    {
        if(this._by_ != null)
        {
            this._by_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._by_ = node;
    }

    public PExp getB()
    {
        return this._b_;
    }

    public void setB(PExp node)
    {
        if(this._b_ != null)
        {
            this._b_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._b_ = node;
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public PComandoCasado getComandoCasado()
    {
        return this._comandoCasado_;
    }

    public void setComandoCasado(PComandoCasado node)
    {
        if(this._comandoCasado_ != null)
        {
            this._comandoCasado_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comandoCasado_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._considering_)
            + toString(this._var_)
            + toString(this._from_)
            + toString(this._to_)
            + toString(this._a_)
            + toString(this._by_)
            + toString(this._b_)
            + toString(this._do_)
            + toString(this._comandoCasado_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._considering_ == child)
        {
            this._considering_ = null;
            return;
        }

        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._from_ == child)
        {
            this._from_ = null;
            return;
        }

        if(this._to_ == child)
        {
            this._to_ = null;
            return;
        }

        if(this._a_ == child)
        {
            this._a_ = null;
            return;
        }

        if(this._by_ == child)
        {
            this._by_ = null;
            return;
        }

        if(this._b_ == child)
        {
            this._b_ = null;
            return;
        }

        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._comandoCasado_ == child)
        {
            this._comandoCasado_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._considering_ == oldChild)
        {
            setConsidering((TConsidering) newChild);
            return;
        }

        if(this._var_ == oldChild)
        {
            setVar((PVar) newChild);
            return;
        }

        if(this._from_ == oldChild)
        {
            setFrom((TFrom) newChild);
            return;
        }

        if(this._to_ == oldChild)
        {
            setTo((TTo) newChild);
            return;
        }

        if(this._a_ == oldChild)
        {
            setA((PExp) newChild);
            return;
        }

        if(this._by_ == oldChild)
        {
            setBy((TBy) newChild);
            return;
        }

        if(this._b_ == oldChild)
        {
            setB((PExp) newChild);
            return;
        }

        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        if(this._comandoCasado_ == oldChild)
        {
            setComandoCasado((PComandoCasado) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
