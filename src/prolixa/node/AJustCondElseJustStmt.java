/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AJustCondElseJustStmt extends PJustStmt
{
    private TJust _just_;
    private TIn _in_;
    private TCase _case_;
    private TThatKw _thatKw_;
    private TParEsq _parEsq_;
    private PExp _exp_;
    private TParDir _parDir_;
    private TDo _do_;
    private PBloco _bloco_;
    private PElseStms _elseStms_;

    public AJustCondElseJustStmt()
    {
        // Constructor
    }

    public AJustCondElseJustStmt(
        @SuppressWarnings("hiding") TJust _just_,
        @SuppressWarnings("hiding") TIn _in_,
        @SuppressWarnings("hiding") TCase _case_,
        @SuppressWarnings("hiding") TThatKw _thatKw_,
        @SuppressWarnings("hiding") TParEsq _parEsq_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TParDir _parDir_,
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") PBloco _bloco_,
        @SuppressWarnings("hiding") PElseStms _elseStms_)
    {
        // Constructor
        setJust(_just_);

        setIn(_in_);

        setCase(_case_);

        setThatKw(_thatKw_);

        setParEsq(_parEsq_);

        setExp(_exp_);

        setParDir(_parDir_);

        setDo(_do_);

        setBloco(_bloco_);

        setElseStms(_elseStms_);

    }

    @Override
    public Object clone()
    {
        return new AJustCondElseJustStmt(
            cloneNode(this._just_),
            cloneNode(this._in_),
            cloneNode(this._case_),
            cloneNode(this._thatKw_),
            cloneNode(this._parEsq_),
            cloneNode(this._exp_),
            cloneNode(this._parDir_),
            cloneNode(this._do_),
            cloneNode(this._bloco_),
            cloneNode(this._elseStms_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAJustCondElseJustStmt(this);
    }

    public TJust getJust()
    {
        return this._just_;
    }

    public void setJust(TJust node)
    {
        if(this._just_ != null)
        {
            this._just_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._just_ = node;
    }

    public TIn getIn()
    {
        return this._in_;
    }

    public void setIn(TIn node)
    {
        if(this._in_ != null)
        {
            this._in_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._in_ = node;
    }

    public TCase getCase()
    {
        return this._case_;
    }

    public void setCase(TCase node)
    {
        if(this._case_ != null)
        {
            this._case_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._case_ = node;
    }

    public TThatKw getThatKw()
    {
        return this._thatKw_;
    }

    public void setThatKw(TThatKw node)
    {
        if(this._thatKw_ != null)
        {
            this._thatKw_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._thatKw_ = node;
    }

    public TParEsq getParEsq()
    {
        return this._parEsq_;
    }

    public void setParEsq(TParEsq node)
    {
        if(this._parEsq_ != null)
        {
            this._parEsq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parEsq_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TParDir getParDir()
    {
        return this._parDir_;
    }

    public void setParDir(TParDir node)
    {
        if(this._parDir_ != null)
        {
            this._parDir_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parDir_ = node;
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public PBloco getBloco()
    {
        return this._bloco_;
    }

    public void setBloco(PBloco node)
    {
        if(this._bloco_ != null)
        {
            this._bloco_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bloco_ = node;
    }

    public PElseStms getElseStms()
    {
        return this._elseStms_;
    }

    public void setElseStms(PElseStms node)
    {
        if(this._elseStms_ != null)
        {
            this._elseStms_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseStms_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._just_)
            + toString(this._in_)
            + toString(this._case_)
            + toString(this._thatKw_)
            + toString(this._parEsq_)
            + toString(this._exp_)
            + toString(this._parDir_)
            + toString(this._do_)
            + toString(this._bloco_)
            + toString(this._elseStms_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._just_ == child)
        {
            this._just_ = null;
            return;
        }

        if(this._in_ == child)
        {
            this._in_ = null;
            return;
        }

        if(this._case_ == child)
        {
            this._case_ = null;
            return;
        }

        if(this._thatKw_ == child)
        {
            this._thatKw_ = null;
            return;
        }

        if(this._parEsq_ == child)
        {
            this._parEsq_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._parDir_ == child)
        {
            this._parDir_ = null;
            return;
        }

        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._bloco_ == child)
        {
            this._bloco_ = null;
            return;
        }

        if(this._elseStms_ == child)
        {
            this._elseStms_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._just_ == oldChild)
        {
            setJust((TJust) newChild);
            return;
        }

        if(this._in_ == oldChild)
        {
            setIn((TIn) newChild);
            return;
        }

        if(this._case_ == oldChild)
        {
            setCase((TCase) newChild);
            return;
        }

        if(this._thatKw_ == oldChild)
        {
            setThatKw((TThatKw) newChild);
            return;
        }

        if(this._parEsq_ == oldChild)
        {
            setParEsq((TParEsq) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._parDir_ == oldChild)
        {
            setParDir((TParDir) newChild);
            return;
        }

        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        if(this._bloco_ == oldChild)
        {
            setBloco((PBloco) newChild);
            return;
        }

        if(this._elseStms_ == oldChild)
        {
            setElseStms((PElseStms) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
