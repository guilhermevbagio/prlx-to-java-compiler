/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import java.util.*;
import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class ADeclaracoesHeadDeclaracoes extends PDeclaracoes
{
    private TIt _it_;
    private TPresents _presents_;
    private TDoisPontos _doisPontos_;
    private final LinkedList<PDeclaracao> _declaracao_ = new LinkedList<PDeclaracao>();

    public ADeclaracoesHeadDeclaracoes()
    {
        // Constructor
    }

    public ADeclaracoesHeadDeclaracoes(
        @SuppressWarnings("hiding") TIt _it_,
        @SuppressWarnings("hiding") TPresents _presents_,
        @SuppressWarnings("hiding") TDoisPontos _doisPontos_,
        @SuppressWarnings("hiding") List<?> _declaracao_)
    {
        // Constructor
        setIt(_it_);

        setPresents(_presents_);

        setDoisPontos(_doisPontos_);

        setDeclaracao(_declaracao_);

    }

    @Override
    public Object clone()
    {
        return new ADeclaracoesHeadDeclaracoes(
            cloneNode(this._it_),
            cloneNode(this._presents_),
            cloneNode(this._doisPontos_),
            cloneList(this._declaracao_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADeclaracoesHeadDeclaracoes(this);
    }

    public TIt getIt()
    {
        return this._it_;
    }

    public void setIt(TIt node)
    {
        if(this._it_ != null)
        {
            this._it_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._it_ = node;
    }

    public TPresents getPresents()
    {
        return this._presents_;
    }

    public void setPresents(TPresents node)
    {
        if(this._presents_ != null)
        {
            this._presents_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._presents_ = node;
    }

    public TDoisPontos getDoisPontos()
    {
        return this._doisPontos_;
    }

    public void setDoisPontos(TDoisPontos node)
    {
        if(this._doisPontos_ != null)
        {
            this._doisPontos_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._doisPontos_ = node;
    }

    public LinkedList<PDeclaracao> getDeclaracao()
    {
        return this._declaracao_;
    }

    public void setDeclaracao(List<?> list)
    {
        for(PDeclaracao e : this._declaracao_)
        {
            e.parent(null);
        }
        this._declaracao_.clear();

        for(Object obj_e : list)
        {
            PDeclaracao e = (PDeclaracao) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._declaracao_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._it_)
            + toString(this._presents_)
            + toString(this._doisPontos_)
            + toString(this._declaracao_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._it_ == child)
        {
            this._it_ = null;
            return;
        }

        if(this._presents_ == child)
        {
            this._presents_ = null;
            return;
        }

        if(this._doisPontos_ == child)
        {
            this._doisPontos_ = null;
            return;
        }

        if(this._declaracao_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._it_ == oldChild)
        {
            setIt((TIt) newChild);
            return;
        }

        if(this._presents_ == oldChild)
        {
            setPresents((TPresents) newChild);
            return;
        }

        if(this._doisPontos_ == oldChild)
        {
            setDoisPontos((TDoisPontos) newChild);
            return;
        }

        for(ListIterator<PDeclaracao> i = this._declaracao_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDeclaracao) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
