/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AForComando extends PComando
{
    private PVar _var_;
    private PExp _a_;
    private PExp _b_;
    private PExp _c_;
    private PComando _comando_;

    public AForComando()
    {
        // Constructor
    }

    public AForComando(
        @SuppressWarnings("hiding") PVar _var_,
        @SuppressWarnings("hiding") PExp _a_,
        @SuppressWarnings("hiding") PExp _b_,
        @SuppressWarnings("hiding") PExp _c_,
        @SuppressWarnings("hiding") PComando _comando_)
    {
        // Constructor
        setVar(_var_);

        setA(_a_);

        setB(_b_);

        setC(_c_);

        setComando(_comando_);

    }

    @Override
    public Object clone()
    {
        return new AForComando(
            cloneNode(this._var_),
            cloneNode(this._a_),
            cloneNode(this._b_),
            cloneNode(this._c_),
            cloneNode(this._comando_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForComando(this);
    }

    public PVar getVar()
    {
        return this._var_;
    }

    public void setVar(PVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public PExp getA()
    {
        return this._a_;
    }

    public void setA(PExp node)
    {
        if(this._a_ != null)
        {
            this._a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._a_ = node;
    }

    public PExp getB()
    {
        return this._b_;
    }

    public void setB(PExp node)
    {
        if(this._b_ != null)
        {
            this._b_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._b_ = node;
    }

    public PExp getC()
    {
        return this._c_;
    }

    public void setC(PExp node)
    {
        if(this._c_ != null)
        {
            this._c_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c_ = node;
    }

    public PComando getComando()
    {
        return this._comando_;
    }

    public void setComando(PComando node)
    {
        if(this._comando_ != null)
        {
            this._comando_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comando_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._var_)
            + toString(this._a_)
            + toString(this._b_)
            + toString(this._c_)
            + toString(this._comando_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._a_ == child)
        {
            this._a_ = null;
            return;
        }

        if(this._b_ == child)
        {
            this._b_ = null;
            return;
        }

        if(this._c_ == child)
        {
            this._c_ = null;
            return;
        }

        if(this._comando_ == child)
        {
            this._comando_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._var_ == oldChild)
        {
            setVar((PVar) newChild);
            return;
        }

        if(this._a_ == oldChild)
        {
            setA((PExp) newChild);
            return;
        }

        if(this._b_ == oldChild)
        {
            setB((PExp) newChild);
            return;
        }

        if(this._c_ == oldChild)
        {
            setC((PExp) newChild);
            return;
        }

        if(this._comando_ == oldChild)
        {
            setComando((PComando) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
