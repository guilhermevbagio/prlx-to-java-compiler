/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AIfCmdIfCmd extends PIfCmd
{
    private PIfHead _ifHead_;
    private PComandoSemBloco _thenCmd_;

    public AIfCmdIfCmd()
    {
        // Constructor
    }

    public AIfCmdIfCmd(
        @SuppressWarnings("hiding") PIfHead _ifHead_,
        @SuppressWarnings("hiding") PComandoSemBloco _thenCmd_)
    {
        // Constructor
        setIfHead(_ifHead_);

        setThenCmd(_thenCmd_);

    }

    @Override
    public Object clone()
    {
        return new AIfCmdIfCmd(
            cloneNode(this._ifHead_),
            cloneNode(this._thenCmd_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfCmdIfCmd(this);
    }

    public PIfHead getIfHead()
    {
        return this._ifHead_;
    }

    public void setIfHead(PIfHead node)
    {
        if(this._ifHead_ != null)
        {
            this._ifHead_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifHead_ = node;
    }

    public PComandoSemBloco getThenCmd()
    {
        return this._thenCmd_;
    }

    public void setThenCmd(PComandoSemBloco node)
    {
        if(this._thenCmd_ != null)
        {
            this._thenCmd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._thenCmd_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ifHead_)
            + toString(this._thenCmd_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ifHead_ == child)
        {
            this._ifHead_ = null;
            return;
        }

        if(this._thenCmd_ == child)
        {
            this._thenCmd_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ifHead_ == oldChild)
        {
            setIfHead((PIfHead) newChild);
            return;
        }

        if(this._thenCmd_ == oldChild)
        {
            setThenCmd((PComandoSemBloco) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
