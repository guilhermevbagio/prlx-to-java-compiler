/* This file was generated by SableCC (http://www.sablecc.org/). */

package grupo_18.node;

import grupo_18.analysis.*;

@SuppressWarnings("nls")
public final class ACmdIfelseComando extends PComando
{
    private PIfThen _ifThen_;
    private PElseTail _elseTail_;

    public ACmdIfelseComando()
    {
        // Constructor
    }

    public ACmdIfelseComando(
        @SuppressWarnings("hiding") PIfThen _ifThen_,
        @SuppressWarnings("hiding") PElseTail _elseTail_)
    {
        // Constructor
        setIfThen(_ifThen_);

        setElseTail(_elseTail_);

    }

    @Override
    public Object clone()
    {
        return new ACmdIfelseComando(
            cloneNode(this._ifThen_),
            cloneNode(this._elseTail_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACmdIfelseComando(this);
    }

    public PIfThen getIfThen()
    {
        return this._ifThen_;
    }

    public void setIfThen(PIfThen node)
    {
        if(this._ifThen_ != null)
        {
            this._ifThen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifThen_ = node;
    }

    public PElseTail getElseTail()
    {
        return this._elseTail_;
    }

    public void setElseTail(PElseTail node)
    {
        if(this._elseTail_ != null)
        {
            this._elseTail_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseTail_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ifThen_)
            + toString(this._elseTail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ifThen_ == child)
        {
            this._ifThen_ = null;
            return;
        }

        if(this._elseTail_ == child)
        {
            this._elseTail_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ifThen_ == oldChild)
        {
            setIfThen((PIfThen) newChild);
            return;
        }

        if(this._elseTail_ == oldChild)
        {
            setElseTail((PElseTail) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
