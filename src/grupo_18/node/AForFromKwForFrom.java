/* This file was generated by SableCC (http://www.sablecc.org/). */

package grupo_18.node;

import grupo_18.analysis.*;

@SuppressWarnings("nls")
public final class AForFromKwForFrom extends PForFrom
{
    private TFrom _from_;
    private PExp _exp_;
    private PForTo _forTo_;

    public AForFromKwForFrom()
    {
        // Constructor
    }

    public AForFromKwForFrom(
        @SuppressWarnings("hiding") TFrom _from_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") PForTo _forTo_)
    {
        // Constructor
        setFrom(_from_);

        setExp(_exp_);

        setForTo(_forTo_);

    }

    @Override
    public Object clone()
    {
        return new AForFromKwForFrom(
            cloneNode(this._from_),
            cloneNode(this._exp_),
            cloneNode(this._forTo_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForFromKwForFrom(this);
    }

    public TFrom getFrom()
    {
        return this._from_;
    }

    public void setFrom(TFrom node)
    {
        if(this._from_ != null)
        {
            this._from_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._from_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public PForTo getForTo()
    {
        return this._forTo_;
    }

    public void setForTo(PForTo node)
    {
        if(this._forTo_ != null)
        {
            this._forTo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._forTo_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._from_)
            + toString(this._exp_)
            + toString(this._forTo_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._from_ == child)
        {
            this._from_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._forTo_ == child)
        {
            this._forTo_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._from_ == oldChild)
        {
            setFrom((TFrom) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._forTo_ == oldChild)
        {
            setForTo((PForTo) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
