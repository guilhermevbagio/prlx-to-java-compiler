/* This file was generated by SableCC (http://www.sablecc.org/). */

package grupo_18.node;

import grupo_18.analysis.*;

@SuppressWarnings("nls")
public final class AMulMoreMulExp extends PMulExp
{
    private PUnaryExp _unaryExp_;
    private PMulTail _mulTail_;

    public AMulMoreMulExp()
    {
        // Constructor
    }

    public AMulMoreMulExp(
        @SuppressWarnings("hiding") PUnaryExp _unaryExp_,
        @SuppressWarnings("hiding") PMulTail _mulTail_)
    {
        // Constructor
        setUnaryExp(_unaryExp_);

        setMulTail(_mulTail_);

    }

    @Override
    public Object clone()
    {
        return new AMulMoreMulExp(
            cloneNode(this._unaryExp_),
            cloneNode(this._mulTail_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMulMoreMulExp(this);
    }

    public PUnaryExp getUnaryExp()
    {
        return this._unaryExp_;
    }

    public void setUnaryExp(PUnaryExp node)
    {
        if(this._unaryExp_ != null)
        {
            this._unaryExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._unaryExp_ = node;
    }

    public PMulTail getMulTail()
    {
        return this._mulTail_;
    }

    public void setMulTail(PMulTail node)
    {
        if(this._mulTail_ != null)
        {
            this._mulTail_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mulTail_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._unaryExp_)
            + toString(this._mulTail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._unaryExp_ == child)
        {
            this._unaryExp_ = null;
            return;
        }

        if(this._mulTail_ == child)
        {
            this._mulTail_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._unaryExp_ == oldChild)
        {
            setUnaryExp((PUnaryExp) newChild);
            return;
        }

        if(this._mulTail_ == oldChild)
        {
            setMulTail((PMulTail) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
