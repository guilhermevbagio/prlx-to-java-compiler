/* This file was generated by SableCC (http://www.sablecc.org/). */

package grupo_18.analysis;

import grupo_18.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgramaPrograma(AProgramaPrograma node);
    void caseADeclaracoesHeadDeclaracoes(ADeclaracoesHeadDeclaracoes node);
    void caseAListaDeclaracaoUnicaListaDeclaracao(AListaDeclaracaoUnicaListaDeclaracao node);
    void caseAListaDeclaracaoRecListaDeclaracao(AListaDeclaracaoRecListaDeclaracao node);
    void caseAComandosHeadComandos(AComandosHeadComandos node);
    void caseAListaComando(AListaComando node);
    void caseAListaComandoUnicoListaComandoRec(AListaComandoUnicoListaComandoRec node);
    void caseAListaComandoRec(AListaComandoRec node);
    void caseAListaVariosComandos(AListaVariosComandos node);
    void caseADeclaracaoMutDeclaracao(ADeclaracaoMutDeclaracao node);
    void caseADeclaracaoUnaltDeclaracao(ADeclaracaoUnaltDeclaracao node);
    void caseADeclaracaoUnaltInitDeclaracao(ADeclaracaoUnaltInitDeclaracao node);
    void caseADeclaracaoVecDeclaracao(ADeclaracaoVecDeclaracao node);
    void caseATamanhosUmTamanhos(ATamanhosUmTamanhos node);
    void caseADimensaoSingleDimensaoVetor(ADimensaoSingleDimensaoVetor node);
    void caseADimensaoMultDimensaoVetor(ADimensaoMultDimensaoVetor node);
    void caseATipoNumberTipo(ATipoNumberTipo node);
    void caseATipoAnswerTipo(ATipoAnswerTipo node);
    void caseATipoSymbolTipo(ATipoSymbolTipo node);
    void caseAVarIdVar(AVarIdVar node);
    void caseAVarCallVar(AVarCallVar node);
    void caseALargHeadListaArgRparen(ALargHeadListaArgRparen node);
    void caseAListaArgPrimeiroListaArg(AListaArgPrimeiroListaArg node);
    void caseAListaArgContListaArgTail(AListaArgContListaArgTail node);
    void caseAListaArgFimListaArgTail(AListaArgFimListaArgTail node);
    void caseAUnaltIdUnalt(AUnaltIdUnalt node);
    void caseAValorSymbValor(AValorSymbValor node);
    void caseAValorBoolValor(AValorBoolValor node);
    void caseAValorNumValor(AValorNumValor node);
    void caseAValorStrValor(AValorStrValor node);
    void caseAComandoBlocoComandoSemIf(AComandoBlocoComandoSemIf node);
    void caseAComandoAtrComandoSemIf(AComandoAtrComandoSemIf node);
    void caseAComandoInitComandoSemIf(AComandoInitComandoSemIf node);
    void caseAComandoCaptureComandoSemIf(AComandoCaptureComandoSemIf node);
    void caseAComandoShowComandoSemIf(AComandoShowComandoSemIf node);
    void caseAComandoWhileComandoSemIf(AComandoWhileComandoSemIf node);
    void caseAComandoForComandoSemIf(AComandoForComandoSemIf node);
    void caseAComandoBreakComandoSemIf(AComandoBreakComandoSemIf node);
    void caseAComandoContinueComandoSemIf(AComandoContinueComandoSemIf node);
    void caseAComando(AComando node);
    void caseAComandoCondComando(AComandoCondComando node);
    void caseAPreCondicional(APreCondicional node);
    void caseAMatchedCondCondicional(AMatchedCondCondicional node);
    void caseAUnmatchedCondCondicional(AUnmatchedCondCondicional node);
    void caseAMatchedIfElseMatched(AMatchedIfElseMatched node);
    void caseAMatchedTail(AMatchedTail node);
    void caseAMatchedTailEnd(AMatchedTailEnd node);
    void caseAUnmatchedCmdUnmatched(AUnmatchedCmdUnmatched node);
    void caseAAsLongKwAsLong(AAsLongKwAsLong node);
    void caseAWhileStmtKwWhileStmt(AWhileStmtKwWhileStmt node);
    void caseAForStmtKwForStmt(AForStmtKwForStmt node);
    void caseAForFromKwForFrom(AForFromKwForFrom node);
    void caseAForToKwForTo(AForToKwForTo node);
    void caseAForByKwForBy(AForByKwForBy node);
    void caseAListaVarPrimeiraListaVar(AListaVarPrimeiraListaVar node);
    void caseAListaVarContListaVarTail(AListaVarContListaVarTail node);
    void caseAListaVarFimListaVarTail(AListaVarFimListaVarTail node);
    void caseALexpHeadListaExpRparen(ALexpHeadListaExpRparen node);
    void caseABlocoBlkBloco(ABlocoBlkBloco node);
    void caseADeclsOptVazioDeclsOpt(ADeclsOptVazioDeclsOpt node);
    void caseADeclsOptComDeclsOpt(ADeclsOptComDeclsOpt node);
    void caseACmdsOptVazioCmdsOpt(ACmdsOptVazioCmdsOpt node);
    void caseACmdsOptComCmdsOpt(ACmdsOptComCmdsOpt node);
    void caseAExp(AExp node);
    void caseAOrNormOrExp(AOrNormOrExp node);
    void caseAOrRparOrExpRparen(AOrRparOrExpRparen node);
    void caseAOrMoreOrTail(AOrMoreOrTail node);
    void caseAXorMoreOrTail(AXorMoreOrTail node);
    void caseAOrEndOrTail(AOrEndOrTail node);
    void caseAOrRMoreOrTailRparen(AOrRMoreOrTailRparen node);
    void caseAXorRMoreOrTailRparen(AXorRMoreOrTailRparen node);
    void caseAOrRParOrTailRparen(AOrRParOrTailRparen node);
    void caseAOrRComOrTailRparen(AOrRComOrTailRparen node);
    void caseAAndTermAndExp(AAndTermAndExp node);
    void caseAAndMoreAndExp(AAndMoreAndExp node);
    void caseAAndExpRTermAndExpRparen(AAndExpRTermAndExpRparen node);
    void caseAAndExpRMoreAndExpRparen(AAndExpRMoreAndExpRparen node);
    void caseAAndRMoreAndTailRparen(AAndRMoreAndTailRparen node);
    void caseAAndRParAndTailRparen(AAndRParAndTailRparen node);
    void caseAAndRComAndTailRparen(AAndRComAndTailRparen node);
    void caseARelHeadRelExp(ARelHeadRelExp node);
    void caseARelGtRelTail(ARelGtRelTail node);
    void caseARelLtRelTail(ARelLtRelTail node);
    void caseARelGeRelTail(ARelGeRelTail node);
    void caseARelLeRelTail(ARelLeRelTail node);
    void caseARelEqRelTail(ARelEqRelTail node);
    void caseARelNeRelTail(ARelNeRelTail node);
    void caseARelEndRelTail(ARelEndRelTail node);
    void caseAAddTermAddExp(AAddTermAddExp node);
    void caseAAddPlusAddExp(AAddPlusAddExp node);
    void caseAAddMinusAddExp(AAddMinusAddExp node);
    void caseAMulExpTermMulExp(AMulExpTermMulExp node);
    void caseAMulExpTimesMulExp(AMulExpTimesMulExp node);
    void caseAMulExpDivMulExp(AMulExpDivMulExp node);
    void caseAMulExpModMulExp(AMulExpModMulExp node);
    void caseAMulTimesMulTail(AMulTimesMulTail node);
    void caseAMulDivMulTail(AMulDivMulTail node);
    void caseAMulModMulTail(AMulModMulTail node);
    void caseAMulEndMulTail(AMulEndMulTail node);
    void caseAUnNegUnaryExp(AUnNegUnaryExp node);
    void caseAUnParenUnaryExp(AUnParenUnaryExp node);
    void caseAUnVarUnaryExp(AUnVarUnaryExp node);
    void caseAUnValUnaryExp(AUnValUnaryExp node);

    void caseTPonto(TPonto node);
    void caseTDoisPontos(TDoisPontos node);
    void caseTVirgula(TVirgula node);
    void caseTPontoEVirgula(TPontoEVirgula node);
    void caseTSimbolo(TSimbolo node);
    void caseTValorBooleano(TValorBooleano node);
    void caseTThis(TThis node);
    void caseTIs(TIs node);
    void caseTProgram(TProgram node);
    void caseTIt(TIt node);
    void caseTPresents(TPresents node);
    void caseTLet(TLet node);
    void caseTUs(TUs node);
    void caseTBegin(TBegin node);
    void caseTThat(TThat node);
    void caseTWould(TWould node);
    void caseTBe(TBe node);
    void caseTAll(TAll node);
    void caseTAlterable(TAlterable node);
    void caseTUnalterable(TUnalterable node);
    void caseTVector(TVector node);
    void caseTOf(TOf node);
    void caseTNumber(TNumber node);
    void caseTAnswer(TAnswer node);
    void caseTSymbol(TSymbol node);
    void caseTCapture(TCapture node);
    void caseTShow(TShow node);
    void caseTJust(TJust node);
    void caseTIn(TIn node);
    void caseTCase(TCase node);
    void caseTThatKw(TThatKw node);
    void caseTDo(TDo node);
    void caseTOtherwise(TOtherwise node);
    void caseTAs(TAs node);
    void caseTLong(TLong node);
    void caseTConsidering(TConsidering node);
    void caseTFrom(TFrom node);
    void caseTTo(TTo node);
    void caseTBy(TBy node);
    void caseTAbandon(TAbandon node);
    void caseTGo(TGo node);
    void caseTNext(TNext node);
    void caseTIteration(TIteration node);
    void caseTInicializacao(TInicializacao node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTIgual(TIgual node);
    void caseTDiferente(TDiferente node);
    void caseTMaiorigual(TMaiorigual node);
    void caseTMenorigual(TMenorigual node);
    void caseTMaior(TMaior node);
    void caseTMenor(TMenor node);
    void caseTSoma(TSoma node);
    void caseTMenos(TMenos node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTXor(TXor node);
    void caseTLiteral(TLiteral node);
    void caseTParEsq(TParEsq node);
    void caseTParDir(TParDir node);
    void caseTColcheteEsq(TColcheteEsq node);
    void caseTColcheteDir(TColcheteDir node);
    void caseTVezes(TVezes node);
    void caseTVazio(TVazio node);
    void caseTComentario(TComentario node);
    void caseTNumero(TNumero node);
    void caseTIdentificador(TIdentificador node);
    void caseTSymbolValue(TSymbolValue node);
    void caseTVectorMatrix(TVectorMatrix node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
