/* This file was generated by SableCC (http://www.sablecc.org/). */

package grupo_18.analysis;

import java.util.*;
import grupo_18.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgramaPrograma(AProgramaPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclaracoesHeadDeclaracoes(ADeclaracoesHeadDeclaracoes node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaDeclaracaoUnicaListaDeclaracao(AListaDeclaracaoUnicaListaDeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaDeclaracaoRecListaDeclaracao(AListaDeclaracaoRecListaDeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandosHeadComandos(AComandosHeadComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaHeadListaComando(AListaHeadListaComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaCtListaComandoTail(AListaCtListaComandoTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaFimListaComandoTail(AListaFimListaComandoTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclaracaoMutDeclaracao(ADeclaracaoMutDeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclaracaoUnaltDeclaracao(ADeclaracaoUnaltDeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclaracaoUnaltInitDeclaracao(ADeclaracaoUnaltInitDeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclaracaoVecDeclaracao(ADeclaracaoVecDeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATamanhosUmTamanhos(ATamanhosUmTamanhos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADimensaoSingleDimensaoVetor(ADimensaoSingleDimensaoVetor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADimensaoMultDimensaoVetor(ADimensaoMultDimensaoVetor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoNumberTipo(ATipoNumberTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoAnswerTipo(ATipoAnswerTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoSymbolTipo(ATipoSymbolTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarIdVar(AVarIdVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarCallVar(AVarCallVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALargHeadListaArgRparen(ALargHeadListaArgRparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaArgPrimeiroListaArg(AListaArgPrimeiroListaArg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaArgContListaArgTail(AListaArgContListaArgTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaArgFimListaArgTail(AListaArgFimListaArgTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaltIdUnalt(AUnaltIdUnalt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValorSymbValor(AValorSymbValor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValorBoolValor(AValorBoolValor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValorNumValor(AValorNumValor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValorStrValor(AValorStrValor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoAtrComandoSemIf(AComandoAtrComandoSemIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoInitComandoSemIf(AComandoInitComandoSemIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoCaptureComandoSemIf(AComandoCaptureComandoSemIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoShowComandoSemIf(AComandoShowComandoSemIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoWhileComandoSemIf(AComandoWhileComandoSemIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoForComandoSemIf(AComandoForComandoSemIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoBreakComandoSemIf(AComandoBreakComandoSemIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoContinueComandoSemIf(AComandoContinueComandoSemIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoBlocoComandoSemIf(AComandoBlocoComandoSemIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoCondComando(AComandoCondComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComando(AComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPreCondicional(APreCondicional node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMatchedCondCondicional(AMatchedCondCondicional node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnmatchedCondCondicional(AUnmatchedCondCondicional node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMatchedIfElseMatched(AMatchedIfElseMatched node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMatchedBaseMatched(AMatchedBaseMatched node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMatchedTail(AMatchedTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMatchedTailEnd(AMatchedTailEnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnmatchedCmdUnmatched(AUnmatchedCmdUnmatched node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnmatchedBsUnmatched(AUnmatchedBsUnmatched node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAsLongKwAsLong(AAsLongKwAsLong node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileStmtKwWhileStmt(AWhileStmtKwWhileStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForStmtKwForStmt(AForStmtKwForStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForFromKwForFrom(AForFromKwForFrom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForToKwForTo(AForToKwForTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForByKwForBy(AForByKwForBy node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaVarPrimeiraListaVar(AListaVarPrimeiraListaVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaVarContListaVarTail(AListaVarContListaVarTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListaVarFimListaVarTail(AListaVarFimListaVarTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALexpHeadListaExpRparen(ALexpHeadListaExpRparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlocoBlkBloco(ABlocoBlkBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclsOptVazioDeclsOpt(ADeclsOptVazioDeclsOpt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclsOptComDeclsOpt(ADeclsOptComDeclsOpt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACmdsOptVazioCmdsOpt(ACmdsOptVazioCmdsOpt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACmdsOptComCmdsOpt(ACmdsOptComCmdsOpt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp(AExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrNormOrExp(AOrNormOrExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrRparOrExpRparen(AOrRparOrExpRparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrMoreOrTail(AOrMoreOrTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAXorMoreOrTail(AXorMoreOrTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrEndOrTail(AOrEndOrTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrRMoreOrTailRparen(AOrRMoreOrTailRparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAXorRMoreOrTailRparen(AXorRMoreOrTailRparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrRParOrTailRparen(AOrRParOrTailRparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrRComOrTailRparen(AOrRComOrTailRparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndTermAndExp(AAndTermAndExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndMoreAndExp(AAndMoreAndExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndExpRTermAndExpRparen(AAndExpRTermAndExpRparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndExpRMoreAndExpRparen(AAndExpRMoreAndExpRparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndRMoreAndTailRparen(AAndRMoreAndTailRparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndRParAndTailRparen(AAndRParAndTailRparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndRComAndTailRparen(AAndRComAndTailRparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARelHeadRelExp(ARelHeadRelExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARelGtRelTail(ARelGtRelTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARelLtRelTail(ARelLtRelTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARelGeRelTail(ARelGeRelTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARelLeRelTail(ARelLeRelTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARelEqRelTail(ARelEqRelTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARelNeRelTail(ARelNeRelTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARelEndRelTail(ARelEndRelTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddTermAddExp(AAddTermAddExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddPlusAddExp(AAddPlusAddExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddMinusAddExp(AAddMinusAddExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMulExpTermMulExp(AMulExpTermMulExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMulExpTimesMulExp(AMulExpTimesMulExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMulExpDivMulExp(AMulExpDivMulExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMulExpModMulExp(AMulExpModMulExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMulTimesMulTail(AMulTimesMulTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMulDivMulTail(AMulDivMulTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMulModMulTail(AMulModMulTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMulEndMulTail(AMulEndMulTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnNegUnaryExp(AUnNegUnaryExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnParenUnaryExp(AUnParenUnaryExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnVarUnaryExp(AUnVarUnaryExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnValUnaryExp(AUnValUnaryExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPonto(TPonto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoisPontos(TDoisPontos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirgula(TVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPontoEVirgula(TPontoEVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSimbolo(TSimbolo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTValorBooleano(TValorBooleano node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThis(TThis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIs(TIs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProgram(TProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIt(TIt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPresents(TPresents node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLet(TLet node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUs(TUs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBegin(TBegin node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThat(TThat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWould(TWould node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBe(TBe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAll(TAll node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAlterable(TAlterable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnalterable(TUnalterable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVector(TVector node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOf(TOf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnswer(TAnswer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSymbol(TSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCapture(TCapture node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShow(TShow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTJust(TJust node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThatKw(TThatKw node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOtherwise(TOtherwise node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAs(TAs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLong(TLong node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConsidering(TConsidering node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFrom(TFrom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTo(TTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBy(TBy node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAbandon(TAbandon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGo(TGo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNext(TNext node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIteration(TIteration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInicializacao(TInicializacao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAtribuicao(TAtribuicao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIgual(TIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiferente(TDiferente node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMaiorigual(TMaiorigual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenorigual(TMenorigual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMaior(TMaior node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenor(TMenor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSoma(TSoma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenos(TMenos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTXor(TXor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLiteral(TLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParEsq(TParEsq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParDir(TParDir node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColcheteEsq(TColcheteEsq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColcheteDir(TColcheteDir node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVezes(TVezes node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVazio(TVazio node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentario(TComentario node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumero(TNumero node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentificador(TIdentificador node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSymbolValue(TSymbolValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVectorMatrix(TVectorMatrix node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
